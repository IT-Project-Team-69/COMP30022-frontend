{"version":3,"sources":["apis/contactsApi.js","apis/groupsApi.js","components/groups/ContactCardStar.js","components/groups/ContactCard.js","components/groups/AddCard.js","components/Modal.js","components/InputField.js","components/CustomInputField.js","components/ProfilePhoto.js","components/Loading.js","apis/profileApi.js","apis/authApi.js","controllers/AuthController.js","components/ContactOverlay.js","components/EditContact.js","components/groups/Quickview.js","pages/Groups.js","components/header/ProfileIcon.js","components/header/NotificationIcon.js","components/header/PopularityCounter.js","components/header/DarkModeToggle.js","components/header/Header.js","pages/Contacts.js","pages/auth/EnterEmail.js","pages/auth/SignUp.js","pages/auth/Login.js","pages/Profile.js","components/ContactsViewButton.js","components/AddContact.js","components/ContactsOptionsBar.js","pages/Settings.js","pages/auth/Landing.js","components/Routes.js","App.js","index.js"],"names":["BASE_URL","ContactsAPI","toggleStar","url","starred","a","form","FormData","append","requestOptions","method","headers","Authorization","sessionStorage","getItem","mode","body","fetch","response","json","getContact","Accept","createContact","contact","JSON","stringify","firstName","lastName","emailAddress","email","organisation","role","phoneNumber","phone","editContact","saveContactPhoto","image","deleteContact","GroupsAPI","deleteEmptyGroups","customQuestions","postQuestion","question","patchQuestion","deleteQuestion","saveCustomQuestions","customInput","i","length","label","deleteCustomQuestions","deletedInput","customAnswers","saveCustomAnswer","data","patchCustomAnswer","saveCustomAnswers","contactURL","answerurl","value","getGroups","groups","group","contactObjects","j","contacts","res","push","createGroup","groupName","name","deleteGroup","getGroup","getGroupNames","map","getContactGroup","filter","includes","updateContactGroup","oldURL","newURL","newGroupName","oldGroup","oldContacts","splice","indexOf","newGroup","newContacts","ContactCardStar","event","stopPropagation","props","window","location","reload","ICON_SIZE","this","size","onClick","className","Provider","color","React","Component","ContactCard","updateQuickView","quickview","values","entries","Object","setState","getProfileIcon","alt","src","id","history","pathname","match","replace","state","prevProps","entry","key","withRouter","AddCard","handleClickOpen","Button","modalStyle","position","left","top","bottom","right","backgroundColor","zindex","Modal","createPortal","style","children","document","getElementById","InputField","onChange","htmlFor","type","placeholder","error","CustomInputField","onLabelChange","onDeleteChange","ProfilePhoto","onHiddenInputClick","onFileSelect","hiddenInputRef","current","click","getInitials","createRef","accept","ref","Loading","width","accountEndpoint","profileEndpoint","ProfileAPI","getUserProfile","accountResponse","profileResponse","accountData","profileData","setItem","updateProfile","user","success","getCustomFields","endpoint","fields","updateCustomFields","userAccount","AuthAPI","checkEmail","signup","userDetails","username","password","first_name","last_name","login","resetPassword","oldPassword","newPassword","AuthController","emailChangeHandler","valid","isEmptyValid","validator","isEmail","nameChangeHandler","passwordChangeHandler","schema","require","is","min","max","has","uppercase","lowercase","digits","not","spaces","validate","confirmPasswordChangeHandler","confirmPassword","phoneChangeHandler","test","enterEmailNext","exists","path","loginUser","token","control","base","border","boxShadow","paddingTop","paddingBottom","paddingLeft","ContactOverlay","proceed","changes","emailValid","phoneValid","changeHandler","target","emailValidation","emailError","validation","phoneError","customChangeHandler","newCustomInput","parseInt","buttonDisabled","customLabelChangeHandler","item","listId","deleteCustomField","addCustomField","newCustomInputs","deleted","goBackAndReload","substring","lastIndexOf","defaultGroup","onGroupSelect","newValue","actionMeta","action","groupInputChangeHandler","inputValue","photoChangeHandler","selected","URL","createObjectURL","files","photoURL","closeDialog","goBack","loading","originalGroup","questions","Close","isClearable","onInputChange","options","defaultValue","styles","theme","colors","primary25","primary","disabled","save","EditContact","componentDidMount","params","answers","valOrEmptyString","val","Quickview","selectedDropdownItem","option","removeCallback","deselectedDropdownItem","addCallback","getDropdownItem","showDropdown","active","classname","quickviewOptions","toggleDropdown","getIcon","Groups","setSearchTerm","isLoaded","addToQuickView","removeFromQuickView","contactInQuery","searchTerm","toLowerCase","exact","component","groupKey","triggerClassName","trigger","triggerOpenedClassName","triggerWhenOpen","open","ProfileIcon","toggleMenu","dropdown","logout","clear","getNavMenu","href","NotificationIcon","getDropdown","notifications","notif","loadData","setInterval","PopularityCounter","popularity","DarkModeToggle","classList","add","light","dark","remove","currentTheme","Header","Contacts","routingFunction","param","sortName","sortOrder","nameSort","sort","b","sortRole","roleSort","sortOrg","orgSort","getContacts","btoa","sortIcon","renderTableHeader","renderItems","notes","index","x","showInitials","first","second","count","EnterEmail","result","SignUp","passwordError","passwordValid","confirmPasswordResult","confirmPasswordError","confirmPasswordValid","firstNameValid","lastNameValid","backHandler","nextHandler","failed","errorMessage","firstNameError","lastNameError","lasttName","Login","Profile","preventBlankLabel","trim","getFields","getLeftCol","concat","colLen","Math","floor","slice","getRightCol","saveHandler","link","defaultPhotoURL","customFields","lastname","ContactsViewButton","leftOnClick","leftLink","leftButtonState","rightButtonState","rightOnClick","rightLink","AddContact","ContactsOptionsBar","newContactOnclick","info","Settings","confirmNewPassword","message","Landing","class","AppRouter","isLoggedIn","contactsPage","contactsOptionsBar","groupsPage","to","Fragment","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ba4ee0ef.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { GroupsAPI } from \"./groupsApi\";\n\nconst BASE_URL = \"https://team-69-backend.herokuapp.com/crm/\";\n\nexport default class ContactsAPI {\n    static toggleStar = async (url, starred) => {\n        const form = new FormData();\n        form.append(\"starred\", starred);\n        const requestOptions = {\n            method: \"PATCH\",\n            headers: {\n                Authorization: `token ${sessionStorage.getItem(\"token\")}`,\n            },\n            mode: \"cors\",\n            body: form,\n        };\n        const response = await fetch(url, requestOptions);\n        return response.json();\n    };\n\n    static getContact = async (url) => {\n        const requestOptions = {\n            method: \"GET\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                Authorization: `token ${sessionStorage.getItem(\"token\")}`,\n            },\n            mode: \"cors\",\n        };\n        const response = await fetch(url, requestOptions);\n        return response.json();\n    };\n\n    static createContact = async (contact) => {\n        const requestOptions = {\n            method: \"POST\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                Authorization: `token ${sessionStorage.getItem(\"token\")}`,\n            },\n            mode: \"cors\",\n            body: JSON.stringify({\n                firstName: contact.firstName,\n                lastName: contact.lastName,\n                emailAddress: contact.email,\n                organisation: contact.organisation,\n                role: contact.role,\n                phoneNumber: contact.phone,\n            }),\n        };\n        const url = BASE_URL + \"contacts/\";\n        const response = await fetch(url, requestOptions);\n        return response.json();\n    };\n\n    static editContact = async (url, contact) => {\n        const requestOptions = {\n            method: \"PATCH\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                Authorization: `token ${sessionStorage.getItem(\"token\")}`,\n            },\n            mode: \"cors\",\n            body: JSON.stringify({\n                firstName: contact.firstName,\n                lastName: contact.lastName,\n                emailAddress: contact.email,\n                organisation: contact.organisation,\n                role: contact.role,\n                phoneNumber: contact.phone,\n            }),\n        };\n        const response = await fetch(url, requestOptions);\n        return response.json();\n    };\n\n    static saveContactPhoto = async (url, image) => {\n        const form = new FormData();\n        if (image !== null) form.append(\"image\", image);\n        const requestOptions = {\n            method: \"PATCH\",\n            headers: {\n                Authorization: `token ${sessionStorage.getItem(\"token\")}`,\n            },\n            mode: \"cors\",\n            body: form,\n        };\n        await fetch(url, requestOptions);\n    };\n\n    static deleteContact = async (url) => {\n        const requestOptions = {\n            method: \"DELETE\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                Authorization: `token ${sessionStorage.getItem(\"token\")}`,\n            },\n            mode: \"cors\",\n        };\n        const response = await fetch(url, requestOptions);\n        await GroupsAPI.deleteEmptyGroups();\n        return response.json();\n    };\n\n    static customQuestions = async () => {\n        const requestOptions = {\n            method: \"GET\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                Authorization: `token ${sessionStorage.getItem(\"token\")}`,\n            },\n            mode: \"cors\",\n        };\n        const url = BASE_URL + \"question/\";\n        const response = await fetch(url, requestOptions);\n        return response.json();\n    };\n\n    static postQuestion = async (question) => {\n        const requestOptions = {\n            method: \"POST\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                Authorization: `token ${sessionStorage.getItem(\"token\")}`,\n            },\n            mode: \"cors\",\n            body: JSON.stringify({\n                question: question,\n            }),\n        };\n        const url = BASE_URL + \"question/\";\n        const response = await fetch(url, requestOptions);\n        return response.json();\n    };\n\n    static patchQuestion = async (url, question) => {\n        const requestOptions = {\n            method: \"PATCH\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                Authorization: `token ${sessionStorage.getItem(\"token\")}`,\n            },\n            mode: \"cors\",\n            body: JSON.stringify({\n                question: question,\n            }),\n        };\n        const response = await fetch(url, requestOptions);\n        return response.json();\n    };\n\n    static deleteQuestion = async (url) => {\n        const requestOptions = {\n            method: \"DELETE\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                Authorization: `token ${sessionStorage.getItem(\"token\")}`,\n            },\n            mode: \"cors\",\n        };\n        await fetch(url, requestOptions);\n    };\n\n    static saveCustomQuestions = async (customInput) => {\n        for (var i = 0; i < customInput.length; i++) {\n            if (customInput[i].url !== \"\") {\n                ContactsAPI.patchQuestion(\n                    customInput[i].url,\n                    customInput[i].label\n                );\n            } else {\n                const response = await ContactsAPI.postQuestion(\n                    customInput[i].label\n                );\n                customInput[i].url = response.url;\n            }\n        }\n        return customInput;\n    };\n\n    static deleteCustomQuestions = async (deletedInput) => {\n        for (var i=0; i<deletedInput.length; i++) {\n            await ContactsAPI.deleteQuestion(deletedInput[i].url);\n        }\n    }\n\n    static customAnswers = async (url) => {\n        const requestOptions = {\n            method: \"GET\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                Authorization: `token ${sessionStorage.getItem(\"token\")}`,\n            },\n            mode: \"cors\",\n        };\n        const response = await fetch(url + \"get_answer/\", requestOptions);\n        return response.json();\n    };\n\n    static saveCustomAnswer = async (question, contact, data) => {\n        const requestOptions = {\n            method: \"POST\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                Authorization: `token ${sessionStorage.getItem(\"token\")}`,\n            },\n            mode: \"cors\",\n            body: JSON.stringify({\n                question: question,\n                contact: contact,\n                data: data,\n            }),\n        };\n        const url = BASE_URL + \"answer/\";\n        await fetch(url, requestOptions);\n    };\n\n    static patchCustomAnswer = async (url, data) => {\n        const requestOptions = {\n            method: \"PATCH\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                Authorization: `token ${sessionStorage.getItem(\"token\")}`,\n            },\n            mode: \"cors\",\n            body: JSON.stringify({\n                data: data,\n            }),\n        };\n        await fetch(url, requestOptions);\n    };\n\n    static saveCustomAnswers = async (contactURL, customInput) => {\n        for (var i = 0; i < customInput.length; i++) {\n            if (customInput[i].answerurl !== \"\") {\n                ContactsAPI.patchCustomAnswer(\n                    customInput[i].answerurl,\n                    customInput[i].value\n                );\n            } else {\n                ContactsAPI.saveCustomAnswer(\n                    customInput[i].url,\n                    contactURL,\n                    customInput[i].value\n                );\n            }\n        }\n    };\n}\n\n// Getting list of ALL contacts\nexport async function getContacts() {\n    return axios.get(\"/crm/contacts/\").then((res) => res.data);\n}\n\nexport function useContacts() {\n    const [loading, setLoading] = useState(true);\n    const [items, setItems] = useState([]);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        getContacts()\n            .then((items) => {\n                setItems(items);\n                setLoading(false);\n            })\n            .catch((e) => {\n                setError(e);\n                setLoading(false);\n            });\n    }, []);\n\n    return {\n        loading,\n        items,\n        error,\n    };\n}\n\n// Adding a new contact\n\n/*\n\nclass App extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        viewCompleted: false,\n        todoList: [],\n        modal: false,\n        activeItem: {\n          title: \"\",\n          description: \"\",\n          completed: false,\n        },\n      };\n    }\n  \n    componentDidMount() {\n      this.refreshList();\n    }\n  \n    refreshList = () => {\n      axios\n        .get(\"/api/todos/\")\n        .then((res) => this.setState({ todoList: res.data }))\n        .catch((err) => console.log(err));\n    };\n  \n    toggle = () => {\n      this.setState({ modal: !this.state.modal });\n    };\n  \n    handleSubmit = (item) => {\n      this.toggle();\n  \n      if (item.id) {\n        axios\n          .put(`/api/todos/${item.id}/`, item)\n          .then((res) => this.refreshList());\n        return;\n      }\n      axios\n        .post(\"/api/todos/\", item)\n        .then((res) => this.refreshList());\n    };\n  \n    handleDelete = (item) => {\n      axios\n        .delete(`/api/todos/${item.id}/`)\n        .then((res) => this.refreshList());\n    };\n  */\n","import ContactsAPI from \"./contactsApi\";\n\nconst BASE_URL = \"https://team-69-backend.herokuapp.com/crm/\";\n// const BASE_URL = \"http://127.0.0.1:8000/crm/\";\n\nexport class GroupsAPI {\n    static getGroups = async () => {\n        const requestOptions = {\n            method: \"GET\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                Authorization: `token ${sessionStorage.getItem(\"token\")}`,\n            },\n            mode: \"cors\",\n        };\n        const response = await fetch(BASE_URL + \"groups/\", requestOptions);\n        var groups = await response.json();\n        for (let i = 0; i < groups.length; i++) {\n            const group = groups[i];\n            group.contactObjects = [];\n            for (let j = 0; j < group.contacts.length; j++) {\n                const res = await ContactsAPI.getContact(group.contacts[j]);\n                group.contactObjects.push(res);\n            }\n        }\n        return groups;\n    };\n\n    static createGroup = async (groupName, contacts) => {\n        const requestOptions = {\n            method: \"POST\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                Authorization: `token ${sessionStorage.getItem(\"token\")}`,\n            },\n            mode: \"cors\",\n            body: JSON.stringify({\n                name: groupName,\n                contacts: contacts,\n            }),\n        };\n        const response = await fetch(BASE_URL + \"groups/\", requestOptions);\n        return response.json();\n    };\n\n    static deleteGroup = async (url) => {\n        const requestOptions = {\n            method: \"DELETE\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                Authorization: `token ${sessionStorage.getItem(\"token\")}`,\n            },\n            mode: \"cors\",\n        };\n        const response = await fetch(url, requestOptions);\n        return response.json();\n    };\n\n    static deleteEmptyGroups = async () => {\n        const groups = await GroupsAPI.getGroups();\n        for (var i = 0; i < groups.length; i++) {\n            if (groups[i].contacts.length === 0) {\n                GroupsAPI.deleteGroup(groups[i].url);\n            }\n        }\n    };\n\n    static getGroup = async (url) => {\n        const requestOptions = {\n            method: \"GET\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                Authorization: `token ${sessionStorage.getItem(\"token\")}`,\n            },\n            mode: \"cors\",\n        };\n        const response = await fetch(url, requestOptions);\n        return response.json();\n    };\n\n    static getGroupNames = async () => {\n        const requestOptions = {\n            method: \"GET\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                Authorization: `token ${sessionStorage.getItem(\"token\")}`,\n            },\n            mode: \"cors\",\n        };\n        var response = await fetch(BASE_URL + \"groups/\", requestOptions);\n        response = await response.json();\n        var groups = response.map((group) => {\n            return {\n                value: group.name,\n                label: group.name,\n                url: group.url,\n            };\n        });\n        return groups;\n    };\n\n    static getContactGroup = async (url) => {\n        const requestOptions = {\n            method: \"GET\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                Authorization: `token ${sessionStorage.getItem(\"token\")}`,\n            },\n            mode: \"cors\",\n        };\n        var response = await fetch(BASE_URL + \"groups/\", requestOptions);\n        response = await response.json();\n        var group = response.filter((group) => {\n            return group.contacts.includes(url);\n        })[0];\n        return group;\n    };\n\n    static updateContactGroup = async (\n        contactURL,\n        oldURL,\n        newURL,\n        newGroupName\n    ) => {\n        function requestOptions(contacts) {\n            return {\n                method: \"PATCH\",\n                headers: {\n                    Accept: \"application/json\",\n                    \"Content-Type\": \"application/json\",\n                    Authorization: `token ${sessionStorage.getItem(\"token\")}`,\n                },\n                mode: \"cors\",\n                body: JSON.stringify({\n                    contacts: contacts,\n                }),\n            };\n        }\n\n        // no group changes\n        if (oldURL === newURL) return;\n\n        // no group to remove contact from if !oldURL\n        // remove contact from existing group\n        if (oldURL) {\n            const oldGroup = await GroupsAPI.getGroup(oldURL);\n            var oldContacts = oldGroup.contacts;\n            oldContacts.splice(oldContacts.indexOf(contactURL), 1);\n            await fetch(oldURL, requestOptions(oldContacts));\n\n            // delete empty groups\n            if (oldContacts.length === 0) {\n                GroupsAPI.deleteGroup(oldURL);\n            }\n        }\n\n        // new group created\n        if (newGroupName && !newURL) {\n            await GroupsAPI.createGroup(newGroupName, [contactURL]);\n        }\n        // add contact to existing group\n        else {\n            const newGroup = await GroupsAPI.getGroup(newURL);\n            var newContacts = newGroup.contacts;\n            newContacts.push(contactURL);\n            await fetch(newURL, requestOptions(newContacts));\n        }\n        // otherwise contact becomes ungrouped\n    };\n}\n","import React from \"react\";\nimport \"../../css/Groups.css\";\nimport ContactsAPI from \"../../apis/contactsApi\";\nimport { AiOutlineStar, AiFillStar } from \"react-icons/ai\";\nimport { IconContext } from \"react-icons\";\n\nexport default class ContactCardStar extends React.Component {\n    toggleStar = async (event) => {\n        event.stopPropagation();\n        await ContactsAPI.toggleStar(this.props.url, !this.props.starred);\n        window.location.reload();\n    };\n\n    render() {\n        var ICON_SIZE = \"16px\";\n        if (this.props.size !== null) {\n            ICON_SIZE = this.props.size;\n        }\n        return (\n            <div onClick={this.toggleStar} data-testid=\"contact-card-star\">\n                {this.props.starred ? (\n                    <div className=\"contact-star starred\">\n                        <IconContext.Provider\n                            value={{ color: \"#df5571\", size: ICON_SIZE }}\n                        >\n                            <AiFillStar data-testid=\"contact-card-star--starred\" />\n                        </IconContext.Provider>\n                    </div>\n                ) : (\n                    <div className=\"contact-star unstarred\">\n                        <IconContext.Provider\n                            value={{ color: \"a4a6f6\", size: ICON_SIZE }}\n                        >\n                            <AiOutlineStar data-testid=\"contact-card-star--unstarred\" />\n                        </IconContext.Provider>\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport ContactCardStar from \"./ContactCardStar\";\nimport { withRouter } from \"react-router-dom\";\n\nclass ContactCard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            entries: [],\n        };\n    }\n\n    componentDidMount() {\n        this.updateQuickView();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps !== this.props) {\n            this.updateQuickView();\n        }\n    }\n\n    updateQuickView = () => {\n        const quickview = this.props.quickview;\n        const values = quickview.map((quickview) => quickview.value);\n        var entries = [];\n        for (const [label, value] of Object.entries(this.props.contact)) {\n            if (values.includes(label)) {\n                var i = values.indexOf(label);\n                entries.push({ label: quickview[i].label, value: value });\n            }\n        }\n        this.setState({\n            entries: entries,\n        });\n    };\n\n    getProfileIcon = () => {\n        if (this.props.contact.image !== null) {\n            return (\n                <img\n                    alt=\"contact profile icon\"\n                    src={this.props.contact.image}\n                    id=\"profile-icon\"\n                />\n            );\n        }\n\n        return (\n            (this.props.contact.firstName && this.props.contact.firstName[0]) +\n            (this.props.contact.lastName && this.props.contact.lastName[0])\n        );\n    };\n\n    editContact = async () => {\n        this.props.history.push({\n            pathname: `${this.props.match.url.replace(/\\/$/g, \"\")}/edit/${\n                this.props.contact.id\n            }`,\n            group: this.props.group,\n        });\n    };\n\n    render() {\n        return (\n            <div\n                className=\"rcorners group-contact-card\"\n                onClick={this.editContact}\n            >\n                <div className=\"contact-card-title\">\n                    <div className=\"left-col\">\n                        <div className=\"dot\">\n                            <div className=\"centeredInDot\">\n                                {this.getProfileIcon()}\n                            </div>\n                        </div>\n                        <div>\n                            {this.props.contact.firstName}{\" \"}\n                            {this.props.contact.lastName}\n                        </div>\n                    </div>\n                    <div className=\"right-col\">\n                        <ContactCardStar\n                            starred={this.props.contact.starred}\n                            url={this.props.contact.url}\n                        />\n                    </div>\n                </div>\n                <div className=\"\">\n                    <table className=\"contact-details\">\n                        <tbody>\n                            {this.state.entries.map((entry, key) => {\n                                return (\n                                    <tr key={key}>\n                                        <th>{entry.label}</th>\n                                        <td>{entry.value}</td>\n                                    </tr>\n                                );\n                            })}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(ContactCard);\n","import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport { withRouter } from \"react-router-dom\";\n\nclass AddCard extends React.Component {\n    handleClickOpen = () => {\n        this.props.history.push({\n            pathname: `${this.props.match.url.replace(/\\/$/g, \"\")}/add/`,\n            group: this.props.group\n        });\n    };\n\n    render() {\n        return (\n            <div className=\"add-contact-card\">\n                <div className=\"center iris60\">\n                    <div className=\"group-add-contact-button\">\n                        <Button color=\"primary\" onClick={this.handleClickOpen}>\n                            <div className=\"message\">+ Add Contact</div>\n                        </Button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(AddCard);\n","import React from \"react\";\nimport { createPortal } from \"react-dom\";\nimport \"../css/Modal.css\";\n\nconst modalStyle = {\n    position: \"fixed\",\n    left: 0,\n    top: 0,\n    bottom: 0,\n    right: 0,\n    backgroundColor: \"rgba(0,0,0,.5)\",\n    zindex: -1\n};\n\nexport default class Modal extends React.Component {\n    render() {\n        return createPortal(\n            <div className=\"modal-background\" style={modalStyle} onClick={this.props.onClick}>\n                {this.props.children}\n            </div>,\n            document.getElementById(\"modal_root\")\n        );\n    }\n}\n","import React from \"react\";\nimport \"../css/InputField.css\";\n\n/**\n * Input Field\n * props:\n * - name\n * - label\n * - type\n * - placeholder\n * - onChange\n * - value\n * - error\n */\nclass InputField extends React.Component {\n    onChange = (event) => {\n        this.props.onChange(event);\n    };\n\n    render() {\n        return (\n            <div className=\"input-field\">\n                <div>\n                    <label\n                        className=\"label\"\n                        id={this.props.name}\n                        htmlFor={this.props.name}\n                    >\n                        {this.props.label}\n                    </label>\n                    <input\n                        id={this.props.name}\n                        type={this.props.type}\n                        name={this.props.name}\n                        placeholder={this.props.placeholder}\n                        onChange={this.onChange}\n                        value={this.props.value}\n                        data-testid={this.props.name}\n                    />\n                </div>\n\n                <div className=\"input-error\" data-testid=\"input-error\">\n                    {this.props.error}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default InputField;\n","import React from \"react\";\nimport \"../css/InputField.css\";\nimport { FaMinusCircle } from \"react-icons/fa\";\n\n/**\n * Custom Input Field\n * Input field with a customisable label with props:\n * - onChange: callback function for when input field value is changed\n * - onLabelChange: callback function for when input field label is changed\n * - onDeleteChange: callback function for when delete button is clicked\n * - name: input label name (usually index)\n * - label: current label\n * - value: current value\n * - placeholder: value placeholder\n */\nclass CustomInputField extends React.Component {\n    onChange = (event) => {\n        this.props.onChange(event);\n    };\n\n    onLabelChange = (event) => {\n        this.props.onLabelChange(event);\n    };\n\n    onDeleteChange = () => {\n        this.props.onDeleteChange(this.props.name);\n    };\n\n    render() {\n        return (\n            <div className=\"input-field custom-input-field\">\n                <div className=\"label\">\n                    <label htmlFor={this.props.name}>\n                        <input\n                            type=\"text\"\n                            className=\"custom-input-label\"\n                            name={this.props.name}\n                            value={this.props.label}\n                            onChange={this.onLabelChange}\n                        />\n                    </label>\n                    <FaMinusCircle\n                        className=\"delete-button\"\n                        id={this.props.name}\n                        onClick={this.onDeleteChange}\n                    />\n                </div>\n                <input\n                    type=\"text\"\n                    name={this.props.name}\n                    placeholder={this.props.placeholder}\n                    onChange={this.onChange}\n                    value={this.props.value}\n                />\n                <div className=\"input-error\">{this.props.error}</div>\n            </div>\n        );\n    }\n}\n\nexport default CustomInputField;\n","import React from \"react\";\nimport \"../css/Profile.css\";\n\n/**\n * Profile photo icon which can be found on the profile page\n * - Displayes user's current profile photo\n * - On click, file selector opens and user can select a new profile photo\n * props:\n * - src\n * - alt\n * - firstName\n * - lastName\n */\n\nclass ProfilePhoto extends React.Component {\n    constructor(props) {\n        super(props);\n        this.hiddenInputRef = React.createRef();\n    }\n\n    onHiddenInputClick = async (event) => {\n        this.props.onChange(event);\n    };\n\n    onFileSelect = () => {\n        this.hiddenInputRef.current.click();\n    };\n\n    getInitials = () => {\n        return (\n            (this.props.firstName && this.props.firstName[0]) +\n            (this.props.lastName && this.props.lastName[0])\n        );\n    };\n\n    render() {\n        return (\n            <div className=\"profile-photo-row\">\n                <div className=\"profile-photo\" onClick={this.onFileSelect}>\n                    {this.props.src === \"\" ? (\n                        <div className=\"large-profile-initials\">\n                            <div className=\"large-initials\">\n                                {this.getInitials()}\n                            </div>\n                        </div>\n                    ) : (\n                        <img src={this.props.src} alt={this.props.alt}></img>\n                    )}\n                    {/* <div className=\"overlay-icon\">\n                        <FaCamera />\n                    </div> */}\n                    <input\n                        className=\"invisible-button\"\n                        type=\"file\"\n                        accept=\"image/png, image/jpeg\"\n                        onChange={this.onHiddenInputClick}\n                        ref={this.hiddenInputRef}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ProfilePhoto;\n","import React from \"react\";\nimport ReactLoading from \"react-loading\";\nimport \"../css/Loading.css\";\n\nexport default class Loading extends React.Component {\n    render() {\n        return (\n            <div className=\"loading-screen\">\n                <ReactLoading type=\"bubbles\" color=\"#C3D3FA\" width={50}></ReactLoading>\n            </div>\n        );\n    }\n}\n","const BASE_URL = \"https://team-69-backend.herokuapp.com/crm/\";\n// const BASE_URL = \"http://127.0.0.1:8000/crm/\";\nconst id = sessionStorage.getItem(\"userId\");\nconst accountEndpoint = BASE_URL + \"useraccounts/\" + id + \"/\";\nconst profileEndpoint = BASE_URL + \"userprofiles/\" + id + \"/\";\n\nclass ProfileAPI {\n    static getUserProfile = async () => {\n        const requestOptions = {\n            method: \"GET\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                Authorization: `token ${sessionStorage.getItem(\"token\")}`,\n            },\n            mode: \"cors\",\n        };\n        let accountResponse = await fetch(accountEndpoint, requestOptions);\n        let profileResponse = await fetch(profileEndpoint, requestOptions);\n        var accountData = await accountResponse.json();\n        let profileData = await profileResponse.json();\n        accountData.organisation = profileData.organisation;\n        accountData.role = profileData.role;\n        accountData.phone = profileData.phoneNumber;\n        accountData.image = profileData.image;\n        sessionStorage.setItem(\"image\", accountData.image);\n        return accountData;\n    };\n\n    static getProfileIcon = async () => {\n        const requestOptions = {\n            method: \"GET\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                Authorization: `token ${sessionStorage.getItem(\"token\")}`,\n            },\n            mode: \"cors\",\n        };\n        let profileResponse = await fetch(profileEndpoint, requestOptions);\n        const res = await profileResponse.json();\n        return res;\n    };\n\n    static updateProfile = async (user) => {\n        const form = new FormData();\n        form.append(\"id\", id);\n        form.append(\"url\", profileEndpoint);\n        form.append(\"userAccount\", accountEndpoint);\n        form.append(\"first_name\", user.firstName);\n        form.append(\"last_name\", user.lastName);\n        form.append(\"email\", user.email);\n        form.append(\"organisation\", user.organisation);\n        form.append(\"role\", user.role);\n        form.append(\"phoneNumber\", user.phone);\n        if (user.image !== null) form.append(\"image\", user.image);\n        const requestOptions = {\n            method: \"PATCH\",\n            headers: {\n                Authorization: `token ${sessionStorage.getItem(\"token\")}`,\n            },\n            mode: \"cors\",\n            body: form,\n        };\n        await fetch(accountEndpoint, requestOptions);\n        await fetch(profileEndpoint, requestOptions);\n        return { success: true };\n    };\n\n    static getCustomFields = async () => {\n        const endpoint = profileEndpoint + \"fields/\";\n        const requestOptions = {\n            method: \"GET\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                Authorization: `token ${sessionStorage.getItem(\"token\")}`,\n            },\n            mode: \"cors\",\n        };\n        const fields = await fetch(endpoint, requestOptions);\n        return fields.json();\n    };\n\n    static updateCustomFields = async (fields) => {\n        const endpoint = profileEndpoint + \"fields/\";\n        for (var field of fields) {\n            field.userAccount = id;\n        }\n        const requestOptions = {\n            method: \"POST\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                Authorization: `token ${sessionStorage.getItem(\"token\")}`,\n            },\n            mode: \"cors\",\n            body: JSON.stringify({\n                fields: fields,\n            }),\n        };\n        await fetch(endpoint, requestOptions);\n    };\n}\n\nexport default ProfileAPI;\n","const BASE_URL = \"https://team-69-backend.herokuapp.com/crm/\";\n// const BASE_URL = \"http://127.0.0.1:8000/crm/\";\n\nclass AuthAPI {\n    static checkEmail = async (email) => {\n        const endpoint = BASE_URL + \"api-auth/checkemail/\";\n        const requestOptions = {\n            method: \"POST\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n            },\n            mode: \"cors\",\n            body: JSON.stringify({ email: email }),\n        };\n        let response = await fetch(endpoint, requestOptions);\n        return response.json();\n    };\n\n    static signup = async (user) => {\n        const endpoint = BASE_URL + \"useraccounts/\";\n        const userDetails = {\n            username: user.email,\n            email: user.email,\n            password: user.password,\n            first_name: user.first_name,\n            last_name: user.last_name,\n        };\n        const requestOptions = {\n            method: \"POST\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n            },\n            mode: \"cors\",\n            body: JSON.stringify(userDetails),\n        };\n        await fetch(endpoint, requestOptions);\n        let res = await AuthAPI.login(user);\n        return res;\n    };\n\n    static login = async (user) => {\n        const endpoint = BASE_URL + \"api-auth/alt-login/\";\n        const requestOptions = {\n            method: \"POST\",\n            headers: {\n                Accept: \"*/*\",\n                \"Content-Type\": \"application/json\",\n            },\n            mode: \"cors\",\n            body: JSON.stringify({\n                username: user.email,\n                password: user.password,\n            }),\n        };\n        let response = await fetch(endpoint, requestOptions);\n        return response.json();\n    };\n\n    static resetPassword = async (user) => {\n        const endpoint = BASE_URL + \"api-auth/changepassword/\";\n        const requestOptions = {\n            method: \"POST\",\n            headers: {\n                Accept: \"*/*\",\n                \"Content-Type\": \"application/json\",\n            },\n            mode: \"cors\",\n            body: JSON.stringify({\n                username: user.username,\n                oldPassword: user.oldPassword,\n                newPassword: user.newPassword,\n            }),\n        };\n        const response = await fetch(endpoint, requestOptions);\n        return response.json();\n    };\n}\n\nexport default AuthAPI;\n","import validator from \"validator\";\nimport ProfileAPI from \"../apis/profileApi\";\nimport AuthAPI from \"../apis/authApi\";\n\nclass AuthController {\n    static emailChangeHandler = (email, isEmptyValid = false) => {\n        var error, valid;\n        // validate email address\n        if (validator.isEmail(email)) {\n            error = \"\";\n            valid = true;\n        } else {\n            error = \"Email invalid!\";\n            valid = false;\n        }\n        // check if empty\n        if (isEmptyValid) {\n            if (email === \"\") {\n                valid = true;\n                error = \"\";\n            }\n        }\n        return { error: error, valid: valid };\n    };\n\n    static nameChangeHandler = async (name) => {\n        var error, valid;\n        if (name.length >= 2) {\n            error = \"\";\n            valid = true;\n        } else {\n            error = \"Enter valid name!\";\n            valid = false;\n        }\n        return { error: error, valid: valid };\n    };\n\n    static passwordChangeHandler = (password) => {\n        var error, valid;\n        var passwordValidator = require(\"password-validator\");\n        var schema = new passwordValidator();\n        schema\n            .is()\n            .min(8) // Minimum length 8\n            .is()\n            .max(100) // Maximum length 100\n            .has()\n            .uppercase() // Must have uppercase letters\n            .has()\n            .lowercase() // Must have lowercase letters\n            .has()\n            .digits(1) // Must have at least 1 digit\n            .has()\n            .not()\n            .spaces(); // Should not have spaces\n\n        if (schema.validate(password)) {\n            error = \"\";\n            valid = true;\n        } else {\n            error =\n                \"Password invalid! Valid password must contain at least 8 characters with uppercase, lowercase and digits, and must not contain any spaces.\";\n            valid = false;\n        }\n        return { error: error, valid: valid };\n    };\n\n    static confirmPasswordChangeHandler = async (password, confirmPassword) => {\n        var error, valid;\n        if (password === confirmPassword) {\n            error = \"\";\n            valid = true;\n        } else {\n            error = \"Passwords do not match.\";\n            valid = false;\n        }\n        return { error: error, valid: valid };\n    };\n\n    static phoneChangeHandler = async (phone, isEmptyValid = false) => {\n        var error, valid;\n        if (/^-?\\d+$/.test(phone)) {\n            error = \"\";\n            valid = true;\n        } else {\n            error = \"Invalid phone number\";\n            valid = false;\n        }\n        // check if empty\n        if (isEmptyValid) {\n            if (phone === \"\") {\n                valid = true;\n                error = \"\";\n            }\n        }\n        return { error: error, valid: valid };\n    };\n\n    // Check if email is associated with an existing account\n    // If yes push to login page, otherwise push to sign up page\n    static enterEmailNext = async (history, email) => {\n        let data = { email: email };\n        let response = await AuthAPI.checkEmail(email);\n        let exists = response.success;\n        var path = \"\";\n        if (exists) {\n            path = \"/auth/login\";\n        } else {\n            path = \"/auth/signup\";\n        }\n        history.push({ pathname: path, state: data });\n    };\n\n    static loginUser = async (response) => {\n        sessionStorage.setItem(\"userId\", response.id);\n        sessionStorage.setItem(\"username\", response.username);\n        sessionStorage.setItem(\"token\", response.token);\n        const data = await ProfileAPI.getProfileIcon();\n        sessionStorage.setItem(\"image\", data.image);\n    };\n}\n\nexport default AuthController;\n","import React from \"react\";\nimport Modal from \"./Modal\";\nimport \"../css/EditContact.css\";\nimport InputField from \"./InputField\";\nimport CustomInputField from \"./CustomInputField\";\nimport ProfilePhoto from \"./ProfilePhoto\";\nimport ContactCardStar from \"./groups/ContactCardStar\";\nimport Loading from \"./Loading\";\nimport AuthController from \"../controllers/AuthController\";\nimport { Close } from \"@material-ui/icons\";\nimport CreatableSelect from \"react-select/creatable\";\nimport \"../css/ReactSelect.css\";\nimport ContactsAPI from \"../apis/contactsApi\";\nimport { GroupsAPI } from \"../apis/groupsApi\";\n\nconst style = {\n    control: (base) => ({\n        ...base,\n        border: 0,\n        boxShadow: \"none\",\n        paddingTop: 5,\n        paddingBottom: 5,\n        paddingLeft: 5,\n    }),\n};\n\nexport default class ContactOverlay extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            url: \"\",\n            loading: true,\n            starred: false,\n            changes: false,\n            photoURL: \"\",\n            image: null,\n            firstName: \"\",\n            lastName: \"\",\n            email: \"\",\n            organisation: \"\",\n            role: \"\",\n            phone: \"\",\n            phoneError: \"\",\n            phoneValid: true,\n            emailError: \"\",\n            emailValid: true,\n            customInput: [],\n            deletedInput: [],\n            originalGroup: null,\n            group: null,\n            groups: [],\n        };\n    }\n\n    async componentDidMount() {\n        // load custom questions\n        var customInput = [];\n        const questions = await ContactsAPI.customQuestions();\n        for (var i = 0; i < questions.length; i++) {\n            customInput.push({\n                label: questions[i].question,\n                value: \"\",\n                url: questions[i].url,\n            });\n        }\n        // load groups\n        const groups = await GroupsAPI.getGroupNames();\n        this.setState({\n            customInput: customInput,\n            groups: groups,\n        });\n    }\n\n    proceed = () => {\n        return (\n            this.state.changes && this.state.emailValid && this.state.phoneValid\n        );\n    };\n\n    changeHandler = async (event) => {\n        this.setState({\n            [event.target.name]: event.target.value,\n            changes: true,\n        });\n    };\n\n    emailChangeHandler = async (event) => {\n        await this.changeHandler(event);\n        const emailValidation = await AuthController.emailChangeHandler(\n            this.state.email,\n            true // isEmptyValid\n        );\n        this.setState({\n            emailError: emailValidation.error,\n            emailValid: emailValidation.valid,\n        });\n    };\n\n    phoneChangeHandler = async (event) => {\n        await this.changeHandler(event);\n        const validation = await AuthController.phoneChangeHandler(\n            this.state.phone,\n            true // isEmptyValid\n        );\n        this.setState({\n            phoneError: validation.error,\n            phoneValid: validation.valid,\n        });\n    };\n\n    customChangeHandler = async (event) => {\n        const newCustomInput = this.state.customInput;\n        const id = parseInt(event.target.name);\n        newCustomInput[id] = {\n            label: this.state.customInput[id].label,\n            value: event.target.value,\n            url: this.state.customInput[id].url,\n            answerurl: this.state.customInput[id].answerurl,\n        };\n        this.setState({\n            customInput: newCustomInput,\n            buttonDisabled: false,\n            changes: true,\n        });\n    };\n\n    customLabelChangeHandler = async (event) => {\n        const newCustomInput = this.state.customInput;\n        const id = parseInt(event.target.name);\n        newCustomInput[id] = {\n            label: event.target.value,\n            value: this.state.customInput[id].value,\n            url: this.state.customInput[id].url,\n            answerurl: this.state.customInput[id].answerurl,\n        };\n        // labels must not be blank\n        this.setState({\n            customInput: newCustomInput,\n            buttonDisabled: false,\n            changes: true,\n        });\n    };\n\n    getCustomFields = () => {\n        var fields = [];\n        for (const [id, item] of this.state.customInput.entries()) {\n            fields.push(\n                <CustomInputField\n                    key={id}\n                    listId={id}\n                    label={item.label}\n                    type=\"text\"\n                    placeholder=\"Enter field value\"\n                    value={item.value}\n                    name={id}\n                    onChange={this.customChangeHandler}\n                    onLabelChange={this.customLabelChangeHandler}\n                    onDeleteChange={this.deleteCustomField}\n                />\n            );\n        }\n        return fields;\n    };\n\n    addCustomField = () => {\n        var newCustomInputs = this.state.customInput;\n        newCustomInputs.push({\n            label: \"Label\",\n            value: \"\",\n            url: \"\",\n            answerurl: \"\",\n        });\n        this.setState({\n            customInput: newCustomInputs,\n            changes: true,\n        });\n    };\n\n    deleteCustomField = (id) => {\n        var newCustomInputs = this.state.customInput;\n        var deletedInput = this.state.deletedInput;\n        const deleted = this.state.customInput[id];\n        deletedInput.push(deleted);\n        newCustomInputs.splice(id, 1);\n        this.setState({\n            customInput: newCustomInputs,\n            changes: true,\n            deletedInput: deletedInput,\n        });\n    };\n\n    deleteContact = async () => {};\n\n    async save() {}\n\n    goBackAndReload = () => {\n        var url = this.props.match.url;\n        url = url.substring(0, url.lastIndexOf(\"/\"));\n        url = url.substring(0, url.lastIndexOf(\"/\"));\n        this.props.history.push(url);\n        window.location.reload();\n    };\n\n    defaultGroup = () => {\n        if (this.state.group) {\n            return this.state.groups.filter((group) => {\n                return group.label === this.state.group.name;\n            })[0];\n        }\n    };\n\n    onGroupSelect = (newValue, actionMeta) => {\n        switch (actionMeta.action) {\n            case \"select-option\": {\n                this.setState({\n                    group: newValue,\n                });\n                break;\n            }\n            case \"clear\": {\n                this.setState({\n                    group: \"\",\n                });\n                break;\n            }\n            case \"create-option\": {\n                var groups = this.state.groups;\n                groups.push(newValue);\n                this.setState({\n                    group: newValue,\n                    groups: groups,\n                });\n                break;\n            }\n            default: {\n                break;\n            }\n        }\n        this.setState({\n            changes: true,\n        });\n    };\n\n    groupInputChangeHandler = (inputValue, actionMeta) => {};\n\n    photoChangeHandler = async (event) => {\n        // creates temporary URL for selected photo file object\n        const selected = URL.createObjectURL(event.target.files[0]);\n        this.setState({\n            photoURL: selected,\n            image: event.target.files[0],\n            changes: true,\n        });\n    };\n\n    closeDialog = () => {\n        this.props.history.goBack();\n    };\n\n    render() {\n        if (this.state.loading) {\n            return (\n                <Modal onClick={this.closeDialog}>\n                    <Loading />\n                </Modal>\n            );\n        }\n        return (\n            <Modal\n                onClick={this.closeDialog}\n                children={[\n                    <div className=\"edit-contact-modal\">\n                        <div\n                            className=\"edit-contact-card\"\n                            onClick={(event) => {\n                                event.stopPropagation();\n                            }}\n                        >\n                            <div className=\"close-button\">\n                                <Close onClick={this.closeDialog} />\n                            </div>\n                            <div className=\"form-area\">\n                                <div className=\"edit-contact-row\">\n                                    <ContactCardStar\n                                        starred={this.state.starred}\n                                        url={this.state.url}\n                                        size={30}\n                                    />\n                                </div>\n                                <ProfilePhoto\n                                    src={this.state.photoURL}\n                                    alt=\"contact profile photo\"\n                                    firstName={this.state.firstName}\n                                    lastName={this.state.lastName}\n                                    onChange={this.photoChangeHandler}\n                                />\n                                <InputField\n                                    type=\"text\"\n                                    name=\"firstName\"\n                                    label=\"First Name\"\n                                    placeholder=\"e.g. Jane\"\n                                    onChange={this.changeHandler}\n                                    value={this.state.firstName}\n                                />\n                                <InputField\n                                    type=\"text\"\n                                    name=\"lastName\"\n                                    label=\"Last Name\"\n                                    placeholder=\"e.g. Doe\"\n                                    onChange={this.changeHandler}\n                                    value={this.state.lastName}\n                                />\n                                <label htmlFor=\"group\">Group</label>\n                                <CreatableSelect\n                                    isClearable\n                                    onChange={this.onGroupSelect}\n                                    onInputChange={this.groupInputChangeHandler}\n                                    options={this.state.groups}\n                                    defaultValue={this.defaultGroup()}\n                                    styles={style}\n                                    theme={(theme) => ({\n                                        ...theme,\n                                        colors: {\n                                            ...theme.colors,\n                                            primary25: \"#F8F9FC\",\n                                            primary: \"#a5a6f6\",\n                                        },\n                                    })}\n                                />\n                                <InputField\n                                    type=\"email\"\n                                    value={this.state.email}\n                                    name=\"email\"\n                                    label=\"Email Address\"\n                                    placeholder=\"e.g. jane.doe@email.com\"\n                                    onChange={this.emailChangeHandler}\n                                    error={this.state.emailError}\n                                />\n                                <InputField\n                                    type=\"text\"\n                                    name=\"organisation\"\n                                    label=\"Organisation\"\n                                    placeholder=\"e.g. Hogwarts\"\n                                    onChange={this.changeHandler}\n                                    value={this.state.organisation}\n                                />\n                                <InputField\n                                    type=\"text\"\n                                    name=\"role\"\n                                    label=\"Role\"\n                                    placeholder=\"e.g. Wizard\"\n                                    onChange={this.changeHandler}\n                                    value={this.state.role}\n                                />\n                                <InputField\n                                    type=\"text\"\n                                    name=\"phone\"\n                                    label=\"Phone Number\"\n                                    placeholder=\"e.g. 0402203392\"\n                                    onChange={this.phoneChangeHandler}\n                                    value={this.state.phone}\n                                    error={this.state.phoneError}\n                                />\n                                {this.getCustomFields()}\n                                <div\n                                    className=\"new-field-button\"\n                                    onClick={this.addCustomField}\n                                >\n                                    + New Field\n                                </div>\n                            </div>\n                            <div className=\"button-row\">\n                                <button\n                                    className=\"accent-button button\"\n                                    type=\"button\"\n                                    name=\"delete\"\n                                    onClick={this.deleteContact}\n                                >\n                                    Delete\n                                </button>\n                                <button\n                                    className=\"primary-button button\"\n                                    type=\"button\"\n                                    name=\"save\"\n                                    disabled={!this.proceed()}\n                                    onClick={this.save}\n                                >\n                                    Save\n                                </button>\n                            </div>\n                        </div>\n                    </div>,\n                ]}\n            ></Modal>\n        );\n    }\n}\n","import \"../css/EditContact.css\";\nimport ContactsAPI from \"../apis/contactsApi\";\nimport { GroupsAPI } from \"../apis/groupsApi\";\nimport ContactOverlay from \"./ContactOverlay\";\n\nexport default class EditContact extends ContactOverlay {\n    componentDidMount = async () => {\n        await super.componentDidMount();\n        // const contact = await ContactsAPI.getContact(this.props.location.url);\n        const endpoint = \"https://team-69-backend.herokuapp.com/crm/contacts/\";\n        const url = endpoint + this.props.match.params.id + \"/\";\n        const contact = await ContactsAPI.getContact(url);\n        const group = await GroupsAPI.getContactGroup(url);\n        const groups = await GroupsAPI.getGroupNames();\n        const answers = await ContactsAPI.customAnswers(url);\n        var customInput = this.state.customInput;\n        for (var i = 0; i < answers.length; i++) {\n            if (customInput[i].url === answers[i].question) {\n                customInput[i].value = answers[i].data;\n                customInput[i].answerurl = answers[i].url;\n            }\n        }\n\n        this.setState({\n            url: url,\n            starred: contact.starred,\n            loading: false,\n            photoURL: contact.image === null ? \"\" : contact.image,\n            firstName: this.valOrEmptyString(contact.firstName),\n            lastName: this.valOrEmptyString(contact.lastName),\n            email: this.valOrEmptyString(contact.emailAddress),\n            organisation: this.valOrEmptyString(contact.organisation),\n            role: this.valOrEmptyString(contact.role),\n            phone: this.valOrEmptyString(contact.phoneNumber),\n            originalGroup: group,\n            group: group,\n            groups: groups,\n            customInput: customInput,\n        });\n    };\n\n    valOrEmptyString = (val) => {\n        return val ? val : \"\";\n    };\n\n    save = async () => {\n        await super.save();\n        await ContactsAPI.editContact(this.state.url, {\n            firstName: this.state.firstName,\n            lastName: this.state.lastName,\n            email: this.state.email,\n            organisation: this.state.organisation,\n            role: this.state.role,\n            phone: this.state.phone,\n        });\n        await GroupsAPI.updateContactGroup(\n            this.state.url,\n            this.state.originalGroup && this.state.originalGroup.url,\n            this.state.group && this.state.group.url,\n            this.state.group && this.state.group.label\n        );\n        const customInput = await ContactsAPI.saveCustomQuestions(\n            this.state.customInput\n        );\n        this.setState({\n            customInput: customInput,\n        });\n        await ContactsAPI.saveCustomAnswers(\n            this.state.url,\n            this.state.customInput\n        );\n        await ContactsAPI.deleteCustomQuestions(this.state.deletedInput);\n\n        await ContactsAPI.saveContactPhoto(this.state.url, this.state.image);\n        this.goBackAndReload();\n    };\n\n    deleteContact = async () => {\n        this.goBackAndReload();\n        await ContactsAPI.deleteContact(this.state.url);\n    };\n}\n","import React from \"react\";\nimport \"../../css/Quickview.css\";\nimport { IoMdArrowDropdown, IoMdArrowDropleft } from \"react-icons/io\";\n\nexport default class Quickview extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            active: false,\n        };\n    }\n\n    selectedDropdownItem = (option) => {\n        return (\n            <li\n                id=\"quickview--dropdown-selected\"\n                onClick={() => this.props.removeCallback(option)}\n            >\n                {option.label}\n            </li>\n        );\n    };\n\n    deselectedDropdownItem = (option) => {\n        return (\n            <li\n                id=\"quickview--dropdown-deselected\"\n                onClick={() => this.props.addCallback(option)}\n            >\n                {option.label}\n            </li>\n        );\n    };\n\n    getDropdownItem = (option) => {\n        if (this.props.quickview.includes(option)) {\n            return this.selectedDropdownItem(option);\n        }\n        return this.deselectedDropdownItem(option);\n    };\n\n    showDropdown = () => {\n        if (this.state.active) {\n            return (\n                <div classname=\"quickview--dropdown\" id=\"quickview--dropdown\">\n                    <ul>\n                        {this.props.quickviewOptions.map((option) => {\n                            return this.getDropdownItem(option);\n                        })}\n                    </ul>\n                </div>\n            );\n        }\n    };\n\n    toggleDropdown = () => {\n        this.setState({\n            active: !this.state.active,\n        });\n    };\n\n    getIcon = () => {\n        if (this.state.active) return <IoMdArrowDropdown />;\n        return <IoMdArrowDropleft />;\n    }\n\n    render() {\n        return (\n            <div className=\"quickview\">\n                <div\n                    className=\"quickview--button\"\n                    onClick={this.toggleDropdown}\n                >\n                    Quickview {this.getIcon()}\n                </div>\n                {this.showDropdown()}\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport { Route } from \"react-router\";\nimport Collapsible from \"react-collapsible\";\nimport \"../css/Groups.css\";\nimport \"../css/Quickview.css\";\nimport { GroupsAPI } from \"../apis/groupsApi\";\nimport ContactCard from \"../components/groups/ContactCard\";\nimport AddCard from \"../components/groups/AddCard\";\nimport EditContact from \"../components/EditContact\";\nimport Loading from \"../components/Loading\";\nimport Quickview from \"../components/groups/Quickview\";\n\nexport default class Groups extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            groups: [],\n            isLoaded: false,\n            searchTerm: \"\",\n            quickviewOptions: [\n                { label: \"Organisation\", value: \"organisation\" },\n                { label: \"Role\", value: \"role\" },\n                { label: \"Email Address\", value: \"emailAddress\" },\n                { label: \"Phone Number\", value: \"phoneNumber\" },\n            ],\n            quickview: [],\n        };\n    }\n\n    setSearchTerm = (event) => {\n        this.setState({\n            [event.target.name]: event.target.value,\n        });\n    };\n\n    componentDidMount = async () => {\n        const groups = await GroupsAPI.getGroups();\n        this.setState({\n            groups: groups,\n            isLoaded: true,\n            quickview: [\n                this.state.quickviewOptions[0],\n                this.state.quickviewOptions[1],\n                this.state.quickviewOptions[2],\n                this.state.quickviewOptions[3],\n            ],\n        });\n    };\n\n    addToQuickView = (option) => {\n        var quickview = this.state.quickview;\n        quickview.push(option);\n        this.setState({\n            quickview: quickview,\n        });\n    };\n\n    removeFromQuickView = (option) => {\n        var quickview = this.state.quickview;\n        quickview.splice(quickview.indexOf(option), 1);\n        this.setState({\n            quickview: quickview,\n        });\n    };\n\n    contactInQuery = (contact) => {\n        if (this.state.searchTerm === \"\") return contact;\n        else if (\n            (contact.firstName &&\n                contact.firstName\n                    .toLowerCase()\n                    .includes(this.state.searchTerm.toLowerCase())) ||\n            (contact.lastName &&\n                contact.lastName\n                    .toLowerCase()\n                    .includes(this.state.searchTerm.toLowerCase())) ||\n            (this.state.quickview.includes(this.state.quickviewOptions[0]) &&\n                contact.organisation &&\n                contact.organisation\n                    .toLowerCase()\n                    .includes(this.state.searchTerm.toLowerCase())) ||\n            (this.state.quickview.includes(this.state.quickviewOptions[1]) &&\n                contact.role &&\n                contact.role\n                    .toLowerCase()\n                    .includes(this.state.searchTerm.toLowerCase())) ||\n            (this.state.quickview.includes(this.state.quickviewOptions[2]) &&\n                contact.emailAddress &&\n                contact.emailAddress\n                    .toLowerCase()\n                    .includes(this.state.searchTerm.toLowerCase())) ||\n            (this.state.quickview.includes(this.state.quickviewOptions[3]) &&\n                contact.phoneNumber &&\n                contact.phoneNumber\n                    .toLowerCase()\n                    .includes(this.state.searchTerm.toLowerCase()))\n        )\n            return contact;\n    };\n\n    render() {\n        if (!this.state.isLoaded) {\n            return <Loading />;\n        }\n        return (\n            <div>\n                <Route\n                    exact\n                    path={`/groups/edit/:id`}\n                    component={EditContact}\n                ></Route>\n                <div className=\"groups-area\">\n                    <div className=\"group-options-row\">\n                        <input\n                            type=\"text\"\n                            name=\"searchTerm\"\n                            placeholder=\"Search...\"\n                            onChange={this.setSearchTerm}\n                        />\n                        <Quickview\n                            quickview={this.state.quickview}\n                            quickviewOptions={this.state.quickviewOptions}\n                            addCallback={this.addToQuickView}\n                            removeCallback={this.removeFromQuickView}\n                        />\n                    </div>\n                    {this.state.groups.length > 0 &&\n                        this.state.groups.map((group, groupKey) => (\n                            <div className=\"group-area\" key={groupKey}>\n                                <div className=\"title\">{group.name}</div>\n                                <Collapsible\n                                    triggerClassName=\"trigger-text\"\n                                    trigger=\"Expand\"\n                                    triggerOpenedClassName=\"trigger-text\"\n                                    triggerWhenOpen=\"Collapse\"\n                                    open={true}\n                                >\n                                    <div className=\"contact-card-area\">\n                                        {group.contactObjects\n                                            .filter((contact) => {\n                                                return this.contactInQuery(\n                                                    contact\n                                                );\n                                            })\n                                            .map((contact, key) => {\n                                                return (\n                                                    <div\n                                                        className=\"user\"\n                                                        key={key}\n                                                    >\n                                                        <ContactCard\n                                                            contact={contact}\n                                                            group={group.name}\n                                                            quickview={\n                                                                this.state\n                                                                    .quickview\n                                                            }\n                                                        />\n                                                    </div>\n                                                );\n                                            })}\n                                        <AddCard group={group} />\n                                    </div>\n                                </Collapsible>\n                            </div>\n                        ))}\n                </div>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport \"../../css/Header.css\";\n\n/**\n * Profile Icon\n * Icon on the nav bar which displays users profile picture,\n * which is specified by the url.\n * When clicked, shows user navigation menu\n */\nclass ProfileIcon extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            url: \"https://techcommunity.microsoft.com/t5/image/serverpage/image-id/217078i525F6A9EF292601F/image-size/large?v=v2&px=999\",\n            dropdown: \"inactive\",\n            mode: \"off\",\n        };\n    }\n\n    toggleMenu = () => {\n        if (this.state.dropdown === \"inactive\") {\n            this.setState({\n                dropdown: \"active\",\n                mode: \"on\",\n            });\n        } else {\n            this.setState({\n                dropdown: \"inactive\",\n                mode: \"off\",\n            });\n        }\n    };\n\n    logout = () => {\n        sessionStorage.clear();\n    };\n\n    getNavMenu = () => {\n        if (this.state.dropdown === \"active\") {\n            return (\n                <div className={\"dropdown \" + this.state.dropdown}>\n                    <ul>\n                        <a href=\"/groups\">\n                            <li>Home</li>\n                        </a>\n                        <a href=\"/profile\">\n                            <li>Profile</li>\n                        </a>\n                        {/* <a href=\"/events\">\n                            <li>Events</li>\n                        </a> */}\n                        <a href=\"/settings\">\n                            <li>Settings</li>\n                        </a>\n                        <a href=\"/auth/logout\">\n                            <li onClick={this.logout}>Logout</li>\n                        </a>\n                    </ul>\n                </div>\n            );\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"profile-dropdown\">\n                <img\n                    className={\"profile-icon \" + this.state.mode}\n                    src={this.state.url}\n                    alt=\"Dropdown icon\"\n                    onClick={this.toggleMenu}\n                ></img>\n                {this.getNavMenu()}\n            </div>\n        );\n    }\n}\n\nexport default ProfileIcon;\n","import React from \"react\";\nimport { FaBell } from \"react-icons/fa\";\nimport \"../../css/Header.css\";\n\n/**\n * Notification Icon\n * situated on the header between dark mode toggle icon and profile icon\n * When clicked a dropdown of users notifications appears\n */\nclass NotificationIcon extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            dropdown: \"inactive\",\n            mode: \"off\",\n            notifications: [],\n        };\n    }\n\n    componentDidMount() {\n        this.loadData();\n        setInterval(this.loadData, 30000);\n    }\n\n    async loadData() {\n        try {\n            // TODO: Notification API call\n            // Set this.state.notifications to list of notifications\n            // const notificationAPI = \"\";\n            // const res = await fetch(notificationAPI);\n        } catch (e) {\n            console.log(e);\n        }\n    }\n\n    toggleMenu = () => {\n        if (this.state.dropdown === \"inactive\") {\n            this.setState({\n                dropdown: \"active\",\n                mode: \"on\",\n            });\n        } else {\n            this.setState({\n                dropdown: \"inactive\",\n                mode: \"off\",\n            });\n        }\n    };\n\n    getDropdown = () => {\n        if (this.state.dropdown === \"active\") {\n            return (\n                <div className={\"dropdown \" + this.state.dropdown}>\n                    <ul>\n                        {this.state.notifications.length === 0 ? (\n                            <li>No new notifications</li>\n                        ) : (\n                            this.state.notifications.map(function (notif) {\n                                return <li>{notif}</li>;\n                            })\n                        )}\n                    </ul>\n                </div>\n            );\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"notification-dropdown\">\n                <div\n                    className={\"icon \" + this.state.mode}\n                    data-testid=\"notification-icon\"\n                    onClick={this.toggleMenu}\n                >\n                    <FaBell />\n                </div>\n                {this.getDropdown()}\n            </div>\n        );\n    }\n}\n\nexport default NotificationIcon;\n","import React from \"react\";\n\n/**\n * Popularity Counter\n * Icon on the header that shows the user how many people have\n * downloaded their contact information\n */\nclass PopularityCounter extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            popularity: \"0\",\n        };\n    }\n\n    // TODO: Retrieve popularity information to be displayed\n\n    render() {\n        return (\n            <div className=\"popularity-dropdown\">\n                <div\n                    className=\"popularity\"\n                    data-testid=\"popularity-counter--value\"\n                >\n                    {this.state.popularity}\n                </div>\n                <div className=\"tool-tip\">\n                    Accumulate points as others download your contact\n                    information!\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default PopularityCounter;\n","import React from \"react\";\nimport \"../../css/Header.css\";\nimport { FaSun } from \"react-icons/fa\";\nimport { FaMoon } from \"react-icons/fa\";\n\n/**\n * Dark mode toggle\n * changes app between light and dark mode when pressed\n */\n\nclass DarkModeToggle extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            mode: \"off\",\n            light: \"active\",\n            dark: \"inactive\",\n            currentTheme: sessionStorage.getItem(\"theme\"),\n        };\n        if (sessionStorage.getItem(\"theme\") === \"dark\") {\n            document.body.classList.add(\"dark-theme\");\n        }\n    }\n\n    onClick = () => {\n        if (sessionStorage.getItem(\"theme\") === \"light\") {\n            sessionStorage.setItem(\"theme\", \"dark\");\n            document.body.classList.add(\"dark-theme\");\n            this.setState({\n                mode: \"on\",\n                light: \"inactive\",\n                dark: \"active\",\n            });\n        } else if (sessionStorage.getItem(\"theme\") === \"dark\") {\n            sessionStorage.setItem(\"theme\", \"light\");\n            document.body.classList.remove(\"dark-theme\");\n            this.setState({\n                mode: \"off\",\n                light: \"active\",\n                dark: \"inactive\",\n            });\n        } else {\n            sessionStorage.setItem(\"theme\", \"light\");\n        }\n    };\n\n    getIcon = () => {\n        if (sessionStorage.getItem(\"theme\") === \"light\")\n            return (\n                <FaSun\n                    className={\n                        \"sun-\" +\n                        sessionStorage.getItem(\"theme\") +\n                        \" {this.state.light}\"\n                    }\n                    data-testid=\"dark-mode-toggle--icon\"\n                />\n            );\n        return (\n            <FaMoon\n                className={\n                    \"moon-\" +\n                    sessionStorage.getItem(\"theme\") +\n                    \" {this.state.dark}\"\n                }\n                data-testid=\"dark-mode-toggle--icon\"\n            />\n        );\n    };\n\n    render() {\n        return (\n            <div\n                className={\"icon \" + sessionStorage.getItem(\"theme\")}\n                onClick={this.onClick}\n                data-testid=\"dark-mode-toggle\"\n            >\n                {this.getIcon()}\n            </div>\n        );\n    }\n}\n\nexport default DarkModeToggle;\n","import React from \"react\";\nimport ProfileIcon from \"./ProfileIcon\";\nimport \"../../css/Header.css\";\nimport NotificationIcon from \"./NotificationIcon\";\nimport PopularityCounter from \"./PopularityCounter\";\nimport DarkModeToggle from \"./DarkModeToggle\";\n\n/**\n * Header\n * Displays app logo and name on the top of the screen\n * - Popularity counter shows user how many people have downloaded their contact information\n * - Moon to toggle light/dark mode\n * - Bell to view notifications\n * - Profile picture, when clicked shows dropdown navigation menu\n */\nclass Header extends React.Component {\n    render() {\n        return (\n            <header>\n                <div className=\"header-content\">\n                    <div className=\"left-header\">\n                        {/* <a href=\"/groups\">Logo and App Name</a> */}\n                        <a href=\"/groups\">\n                            <img\n                                className=\"logo\"\n                                src=\"knotwork-02.png\"\n                                alt=\"knotwork-logo\"\n                            ></img>\n                        </a>\n                    </div>\n                    <div className=\"right-header\">\n                        <PopularityCounter />\n                        <DarkModeToggle />\n                        <NotificationIcon />\n                        <ProfileIcon />\n                    </div>\n                </div>\n            </header>\n        );\n    }\n}\n\nexport default Header;\n","import React from \"react\";\nimport { Route } from \"react-router\";\nimport \"../css/Contacts.css\";\nimport { IoMdArrowDropdown, IoMdArrowDropleft } from \"react-icons/io\";\nimport { AiOutlineStar, AiFillStar } from \"react-icons/ai\";\nimport { IconContext } from \"react-icons\";\nimport EditContact from \"../components/EditContact\";\nimport { withRouter } from \"react-router-dom\";\n\nconst BASE_URL = \"https://team-69-backend.herokuapp.com/crm/\";\n\nclass Contacts extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            nameSort: false,\n            orgSort: false,\n            roleSort: false,\n            organisation: true,\n            role: true,\n            email: true,\n            phone: true,\n            notes: true,\n            dropdown: false,\n            searchTerm: \"\",\n            contacts: [],\n            count: 0,\n        };\n    }\n\n    routingFunction = (param) => {\n        this.props.history.push({\n            pathname: `${this.props.location.pathname.replace(\n                /\\/$/g,\n                \"\"\n            )}/edit/${param.id}`,\n            url: param.url,\n        });\n    };\n\n    setSearchTerm = (event) => {\n        this.setState({\n            [event.target.name]: event.target.value,\n        });\n    };\n\n    sortName = () => {\n        const sortOrder = !this.state.nameSort;\n        if (sortOrder) {\n            this.state.contacts.sort((a, b) =>\n                a.firstName < b.firstName ? 1 : -1\n            );\n        } else {\n            this.state.contacts.sort((a, b) =>\n                a.firstName > b.firstName ? 1 : -1\n            );\n        }\n        this.setState({ nameSort: sortOrder });\n    };\n\n    sortRole = () => {\n        const sortOrder = !this.state.roleSort;\n        if (sortOrder) {\n            this.state.contacts.sort((a, b) => (a.role < b.role ? 1 : -1));\n        } else {\n            this.state.contacts.sort((a, b) => (a.role > b.role ? 1 : -1));\n        }\n        this.setState({ roleSort: sortOrder });\n    };\n\n    sortOrg = () => {\n        const sortOrder = !this.state.orgSort;\n        if (sortOrder) {\n            this.state.contacts.sort((a, b) =>\n                a.organisation < b.organisation ? 1 : -1\n            );\n        } else {\n            this.state.contacts.sort((a, b) =>\n                a.organisation > b.organisation ? 1 : -1\n            );\n        }\n        this.setState({ orgSort: sortOrder });\n    };\n\n    getContacts = async () => {\n        const requestOptions = {\n            method: \"GET\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\",\n                Authorization:\n                    `Basic ` +\n                    btoa(\n                        sessionStorage.getItem(\"username\") +\n                            \":\" +\n                            sessionStorage.getItem(\"password\")\n                    ),\n            },\n            mode: \"cors\",\n        };\n        const response = await fetch(BASE_URL + \"contacts/\", requestOptions);\n        const data = await response.json();\n        if (data.length != this.state.contacts.length)\n            this.setState({ contacts: data });\n    };\n\n    componentDidMount() {\n        this.getContacts();\n    }\n\n    componentDidUpdate() {\n        this.getContacts();\n    }\n\n    showDropdown = () => {\n        if (this.state.dropdown) {\n            return (\n                <div className=\"d-flex\">\n                    <div className=\"searchbar\">\n                        <input\n                            type=\"text\"\n                            placeholder=\"Search...\"\n                            onChange={(event) =>\n                                this.setState({\n                                    searchTerm: event.target.value,\n                                })\n                            }\n                        />\n                    </div>\n\n                    <div className=\"dropdown-box\">\n                        <button\n                            className=\"dropbtn\"\n                            onClick={() => this.setState({ dropdown: false })}\n                        >\n                            Columns <IoMdArrowDropdown />\n                        </button>\n                        <ul className=\"dropdown-content\">\n                            {this.state.organisation ? (\n                                <button\n                                    id=\"quickview--dropdown-selected\"\n                                    onClick={() =>\n                                        this.setState({ organisation: false })\n                                    }\n                                >\n                                    Organisation\n                                </button>\n                            ) : (\n                                <button\n                                    id=\"quickview--dropdown-deselected\"\n                                    onClick={() =>\n                                        this.setState({ organisation: true })\n                                    }\n                                >\n                                    Organisation\n                                </button>\n                            )}\n                            {this.state.role ? (\n                                <button\n                                    id=\"quickview--dropdown-selected\"\n                                    onClick={() =>\n                                        this.setState({ role: false })\n                                    }\n                                >\n                                    Role\n                                </button>\n                            ) : (\n                                <button\n                                    id=\"quickview--dropdown-deselected\"\n                                    onClick={() =>\n                                        this.setState({ role: true })\n                                    }\n                                >\n                                    Role\n                                </button>\n                            )}\n                            {this.state.email ? (\n                                <button\n                                    id=\"quickview--dropdown-selected\"\n                                    onClick={() =>\n                                        this.setState({ email: false })\n                                    }\n                                >\n                                    Email\n                                </button>\n                            ) : (\n                                <button\n                                    id=\"quickview--dropdown-deselected\"\n                                    onClick={() =>\n                                        this.setState({ email: true })\n                                    }\n                                >\n                                    Email\n                                </button>\n                            )}\n                            {this.state.phone ? (\n                                <button\n                                    id=\"quickview--dropdown-selected\"\n                                    onClick={() =>\n                                        this.setState({ phone: false })\n                                    }\n                                >\n                                    Phone\n                                </button>\n                            ) : (\n                                <button\n                                    id=\"quickview--dropdown-deselected\"\n                                    onClick={() =>\n                                        this.setState({ phone: true })\n                                    }\n                                >\n                                    Phone\n                                </button>\n                            )}\n                        </ul>\n                    </div>\n                </div>\n            );\n        } else {\n            return (\n                <div className=\"d-flex\">\n                    <div className=\"searchbar\">\n                        <input\n                            type=\"text\"\n                            placeholder=\"Search...\"\n                            onChange={(event) => {\n                                this.setState({\n                                    searchTerm: event.target.value,\n                                });\n                            }}\n                        />\n                    </div>\n                    <div className=\"dropdown-box\">\n                        <button\n                            className=\"dropbtn\"\n                            onClick={() => this.setState({ dropdown: true })}\n                        >\n                            Columns <IoMdArrowDropleft />\n                        </button>\n                    </div>\n                </div>\n            );\n        }\n    };\n\n    sortIcon = (sort) => {\n        return sort ? <span>▲</span> : <span>▼</span>;\n    };\n\n    renderTableHeader = () => {\n        return (\n            <div className=\"person contacts-header\">\n                <div className=\"row-left\">\n                    <div className=\"w-5 row-item\"></div>\n                    <div className=\"w-5 row-item\">\n                        <div className=\"w-5 row-item\">\n                            <IconContext.Provider value={{ color: \"a4a6f6\" }}>\n                                <AiFillStar />\n                            </IconContext.Provider>\n                        </div>\n                    </div>\n                    <div\n                        className=\"w-name row-item sortable\"\n                        onClick={this.sortName}\n                    >\n                        {this.sortIcon(this.state.nameSort)} Name\n                    </div>\n                    {/* <div className=\"w-10\">Groups</div> */}\n                    {this.state.organisation ? (\n                        <div\n                            className=\"w-15 row-item sortable\"\n                            onClick={this.sortOrg}\n                        >\n                            {this.sortIcon(this.state.orgSort)} Organisation\n                        </div>\n                    ) : null}\n                    {this.state.role ? (\n                        <div\n                            className=\"w-10 row-item sortable\"\n                            onClick={this.sortRole}\n                        >\n                            {this.sortIcon(this.state.roleSort)} Role\n                        </div>\n                    ) : null}\n                    {this.state.email ? (\n                        <div className=\"w-15 row-item\">Email</div>\n                    ) : null}\n                    {this.state.phone ? (\n                        <div className=\"w-phone row-item\">Phone</div>\n                    ) : null}\n                </div>\n                <div className=\"row-right\">\n                    <div className=\"w-edit row-item button invisible-button edit-button\">\n                        Edit\n                    </div>\n                </div>\n            </div>\n        );\n    };\n\n    renderItems = () => {\n        if (this.state.contacts.length > 0) {\n            return this.state.contacts\n                .filter((val) => {\n                    if (this.state.searchTerm === \"\") {\n                        return val;\n                    } else if (\n                        val.firstName\n                            .toLowerCase()\n                            .includes(this.state.searchTerm.toLowerCase())\n                    ) {\n                        return val;\n                    } else if (\n                        val.lastName\n                            .toLowerCase()\n                            .includes(this.state.searchTerm.toLowerCase())\n                    ) {\n                        return val;\n                    } else if (\n                        val.organisation != null &&\n                        val.organisation\n                            .toLowerCase()\n                            .includes(this.state.searchTerm.toLowerCase())\n                    ) {\n                        return val;\n                    } else if (\n                        val.role != null &&\n                        val.role\n                            .toLowerCase()\n                            .includes(this.state.searchTerm.toLowerCase())\n                    ) {\n                        return val;\n                    } else if (\n                        val.emailAddress != null &&\n                        val.emailAddress.includes(this.state.searchTerm)\n                    ) {\n                        return val;\n                    } else if (\n                        val.phoneNumber != null &&\n                        val.phoneNumber\n                            .toLowerCase()\n                            .includes(this.state.searchTerm.toLowerCase())\n                    ) {\n                        return val;\n                    } else if (\n                        val.notes != null &&\n                        val.notes\n                            .toLowerCase()\n                            .includes(this.state.searchTerm.toLowerCase())\n                    ) {\n                        return val;\n                    }\n                })\n                .map((item, index) => {\n                    let x = index % 2;\n                    return (\n                        <div className={\"person color-\" + x} key={index}>\n                            <div className=\"row-left\">\n                                <div className=\"w-5 row-item\">\n                                    {this.showInitials(item)}\n                                </div>\n                                <div className=\"w-5 row-item\">\n                                    {item.starred ? (\n                                        <div className=\"w-5 row-item\">\n                                            <IconContext.Provider\n                                                value={{ color: \"#df5571\" }}\n                                            >\n                                                <AiFillStar />\n                                            </IconContext.Provider>\n                                        </div>\n                                    ) : (\n                                        <div className=\"w-5 row-item\">\n                                            <IconContext.Provider\n                                                value={{ color: \"a4a6f6\" }}\n                                            >\n                                                <AiOutlineStar />\n                                            </IconContext.Provider>\n                                        </div>\n                                    )}\n                                </div>\n                                <div className=\"w-name row-item\">\n                                    {item.firstName} {item.lastName}\n                                </div>\n                                {this.state.organisation ? (\n                                    <div className=\"w-15 row-item\">\n                                        {item.organisation}\n                                    </div>\n                                ) : null}\n                                {this.state.role ? (\n                                    <div className=\"w-10 row-item\">\n                                        {item.role}\n                                    </div>\n                                ) : null}\n                                {this.state.email ? (\n                                    <div className=\"w-15 row-item\">\n                                        <a href={\"mailto:\" + item.emailAddress}>\n                                            {item.emailAddress}\n                                        </a>\n                                    </div>\n                                ) : (\n                                    <div></div>\n                                )}\n                                {this.state.phone ? (\n                                    <div className=\"w-phone row-item\">\n                                        {item.phoneNumber}\n                                    </div>\n                                ) : null}\n                            </div>\n                            <div\n                                className=\"row-right\"\n                                onClick={() => {\n                                    this.routingFunction(item);\n                                }}\n                            >\n                                <div className=\"w-edit row-item edit-button\">\n                                    Edit\n                                </div>\n                            </div>\n                        </div>\n                    );\n                });\n        } else {\n            return null;\n        }\n    };\n\n    showInitials = (item) => {\n        if (item.image !== null) {\n            return (\n                <div className=\"initials\">\n                    <img\n                        alt=\"contact profile icon\"\n                        src={item.image}\n                        id=\"row-profile-icon\"\n                    ></img>\n                </div>\n            );\n        }\n        const first = item.firstName[0];\n        const second = item.lastName[0];\n        return (\n            <div className=\"initials\">\n                {first}\n                {second}\n            </div>\n        );\n    };\n\n    render() {\n        return (\n            <div>\n                <Route\n                    exact\n                    path={`/contacts/edit/:id`}\n                    component={EditContact}\n                ></Route>\n                {this.showDropdown()}\n                <div className=\"contacts-table\">\n                    {this.renderTableHeader()}\n                    {this.renderItems()}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(Contacts);\n","import React from \"react\";\nimport InputField from \"../../components/InputField\";\nimport AuthController from \"../../controllers/AuthController\";\n\nclass EnterEmail extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            email: \"\",\n            emailError: \"\",\n            emailValid: false,\n        };\n    }\n\n    changeHandler = async (event) => {\n        await this.setState({ [event.target.name]: event.target.value });\n        let result = await AuthController.emailChangeHandler(this.state.email);\n        this.setState({\n            emailError: result.error,\n            emailValid: result.valid,\n        });\n    };\n\n    render() {\n        return (\n            <div className=\"auth-form\">\n                <img\n                    className=\"logo auth-logo\"\n                    src=\"knotwork-textonly.png\"\n                    alt=\"Knotwork logo\"\n                ></img>\n                <InputField\n                    name=\"email\"\n                    value={this.state.email}\n                    label=\"Email Address\"\n                    placeholder=\"e.g. jane.doe@gmail.com\"\n                    type=\"email\"\n                    onChange={this.changeHandler}\n                    disabled=\"false\"\n                    error={this.state.emailError}\n                />\n                <div className=\"button-row\">\n                    <button\n                        className=\"invisible-button\"\n                        type=\"button\"\n                        disabled={true}\n                    ></button>\n                    <button\n                        className=\"button primary-button\"\n                        type=\"button\"\n                        name=\"next\"\n                        disabled={!this.state.emailValid}\n                        onClick={() =>\n                            AuthController.enterEmailNext(\n                                this.props.history,\n                                this.state.email\n                            )\n                        }\n                    >\n                        NEXT\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default EnterEmail;\n","import React from \"react\";\nimport InputField from \"../../components/InputField\";\nimport AuthController from \"../../controllers/AuthController\";\nimport AuthAPI from \"../../apis/authApi\";\n\nclass SignUp extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            email: \"\",\n            firstName: \"\",\n            lastName: \"\",\n            password: \"\",\n            confirmPassword: \"\",\n            emailError: \"\",\n            firstNameError: \"\",\n            lastNameError: \"\",\n            passwordError: \"\",\n            confirmPasswordError: \"\",\n            emailValid: true,\n            firstNameValid: false,\n            lastNameValid: false,\n            passwordValid: false,\n            confirmPasswordValid: false,\n            errorMessage:\n                \"Email already associated with existing account. Try again with a different email address. \",\n            failed: \"\",\n        };\n    }\n\n    emailChangeHandler = async (event) => {\n        await this.setState({ [event.target.name]: event.target.value });\n        let result = await AuthController.emailChangeHandler(this.state.email);\n        this.setState({\n            emailError: result.error,\n            emailValid: result.valid,\n        });\n    };\n\n    nameChangeHandler = async (event) => {\n        await this.setState({ [event.target.name]: event.target.value });\n        let error = event.target.name + \"Error\";\n        let valid = event.target.name + \"Valid\";\n        let result = await AuthController.nameChangeHandler(event.target.value);\n        this.setState({\n            [error]: result.error,\n            [valid]: result.valid,\n        });\n    };\n\n    passwordChangeHandler = async (event) => {\n        await this.setState({ [event.target.name]: event.target.value });\n        let result = AuthController.passwordChangeHandler(event.target.value);\n        this.setState({\n            passwordError: result.error,\n            passwordValid: result.valid,\n        });\n        let confirmPasswordResult =\n            await AuthController.confirmPasswordChangeHandler(\n                this.state.password,\n                this.state.confirmPassword\n            );\n        this.setState({\n            confirmPasswordError: confirmPasswordResult.error,\n            confirmPasswordValid: confirmPasswordResult.valid,\n        });\n    };\n\n    confirmPasswordChangeHandler = async (event) => {\n        await this.setState({ [event.target.name]: event.target.value });\n        let result = await AuthController.confirmPasswordChangeHandler(\n            this.state.password,\n            this.state.confirmPassword\n        );\n        this.setState({\n            confirmPasswordError: result.error,\n            confirmPasswordValid: result.valid,\n        });\n    };\n\n    proceed = () => {\n        return (\n            this.state.emailValid &&\n            this.state.firstNameValid &&\n            this.state.lastNameValid &&\n            this.state.passwordValid &&\n            this.state.confirmPasswordValid\n        );\n    };\n\n    backHandler = async (event) => {\n        this.props.history.goBack();\n    };\n\n    nextHandler = async (event) => {\n        // redirect to home page\n        let response = await AuthAPI.signup({\n            email: this.state.email,\n            password: this.state.password,\n            first_name: this.state.firstName,\n            last_name: this.state.lastName,\n        });\n        if (response && response.success) {\n            await AuthController.loginUser(response);\n            sessionStorage.setItem(\"username\", response.username);\n            sessionStorage.setItem(\"password\", this.state.password);\n            this.props.history.push(\"/groups\");\n        } else {\n            this.setState({\n                failed: this.state.errorMessage,\n                emailValid: false,\n            });\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"auth-form\">\n                <div>\n                    <InputField\n                        name=\"email\"\n                        value={this.state.email}\n                        label=\"Email Address\"\n                        placeholder=\"e.g. jane.doe@gmail.com\"\n                        type=\"email\"\n                        onChange={this.emailChangeHandler}\n                        disabled=\"false\"\n                        error={this.state.emailError}\n                    />\n                    <InputField\n                        name=\"firstName\"\n                        value={this.state.firstName}\n                        label=\"First Name\"\n                        placeholder=\"e.g. Jane\"\n                        type=\"text\"\n                        onChange={this.nameChangeHandler}\n                        disabled=\"false\"\n                        error={this.state.firstNameError}\n                    />\n                    <InputField\n                        name=\"lastName\"\n                        value={this.state.lasttName}\n                        label=\"Last Name\"\n                        placeholder=\"e.g. Doe\"\n                        type=\"text\"\n                        onChange={this.nameChangeHandler}\n                        disabled=\"false\"\n                        error={this.state.lastNameError}\n                    />\n                    <InputField\n                        name=\"password\"\n                        value={this.state.password}\n                        label=\"Password\"\n                        placeholder=\"*************\"\n                        type=\"password\"\n                        onChange={this.passwordChangeHandler}\n                        disabled=\"false\"\n                        error={this.state.passwordError}\n                    />\n                    <InputField\n                        name=\"confirmPassword\"\n                        value={this.state.confirmPassword}\n                        label=\"Confirm Password\"\n                        placeholder=\"*************\"\n                        type=\"password\"\n                        onChange={this.confirmPasswordChangeHandler}\n                        disabled=\"false\"\n                        error={this.state.confirmPasswordError}\n                    />\n                </div>\n                <div className=\"input-error\">{this.state.failed}</div>\n                <div className=\"button-row\">\n                    <button\n                        className=\"button secondary-button\"\n                        type=\"button\"\n                        name=\"next\"\n                        onClick={this.backHandler}\n                    >\n                        BACK\n                    </button>\n                    <button\n                        className=\"button primary-button\"\n                        type=\"button\"\n                        name=\"next\"\n                        disabled={!this.proceed()}\n                        onClick={this.nextHandler}\n                    >\n                        SIGN UP\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default SignUp;\n","import React from \"react\";\nimport InputField from \"../../components/InputField\";\nimport AuthController from \"../../controllers/AuthController\";\nimport AuthAPI from \"../../apis/authApi\";\n\nclass Login extends React.Component {\n    static email = \"\";\n    constructor(props) {\n        super(props);\n        this.state = {\n            email: \"\",\n            password: \"\",\n            emailError: \"\",\n            passwordError: \"\",\n            emailValid: true,\n            passwordValid: false,\n            errorMessage:\n                \"Incorrect email address or password. Please try again.\",\n            failed: \"\",\n        };\n    }\n\n    emailChangeHandler = async (event) => {\n        await this.setState({ [event.target.name]: event.target.value });\n        const result = AuthController.emailChangeHandler(this.state.email);\n        this.setState({\n            emailError: result.error,\n            emailValid: result.valid,\n        });\n    };\n\n    passwordChangeHandler = async (event) => {\n        await this.setState({ [event.target.name]: event.target.value });\n        if (event.target.value) {\n            this.setState({\n                passwordValid: true,\n            });\n        } else {\n            this.setState({\n                passwordValid: false,\n            });\n        }\n    };\n\n    proceed = () => {\n        return this.state.emailValid && this.state.passwordValid;\n    };\n\n    backHandler = async (event) => {\n        this.props.history.goBack();\n    };\n\n    // CONNECT LOGIN API\n    nextHandler = async (event) => {\n        let response = await AuthAPI.login({\n            email: this.state.email,\n            password: this.state.password,\n        });\n        if (\"id\" in response) {\n            await AuthController.loginUser(response);\n            sessionStorage.setItem(\"username\", response.username);\n            sessionStorage.setItem(\"password\", this.state.password);\n            this.props.history.push(\"/groups\");\n        } else {\n            this.setState({\n                failed: this.state.errorMessage,\n            });\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"auth-form\">\n                <div>\n                    <InputField\n                        name=\"email\"\n                        value={this.state.email}\n                        label=\"Email Address\"\n                        placeholder=\"e.g. jane.doe@gmail.com\"\n                        type=\"email\"\n                        onChange={this.emailChangeHandler}\n                        disabled=\"false\"\n                        error={this.state.emailError}\n                    />\n                    <InputField\n                        name=\"password\"\n                        value={this.state.password}\n                        label=\"Password\"\n                        placeholder=\"*************\"\n                        type=\"password\"\n                        onChange={this.passwordChangeHandler}\n                        disabled=\"false\"\n                        error={this.state.passwordError}\n                    />\n                </div>\n                <div className=\"input-error\">{this.state.failed}</div>\n                <div className=\"button-row\">\n                    <button\n                        className=\"button secondary-button\"\n                        type=\"button\"\n                        name=\"next\"\n                        onClick={this.backHandler}\n                    >\n                        BACK\n                    </button>\n                    <button\n                        className=\"button primary-button\"\n                        type=\"button\"\n                        name=\"next\"\n                        disabled={!this.proceed()}\n                        onClick={this.nextHandler}\n                    >\n                        LOGIN\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Login;\n","import React from \"react\";\nimport InputField from \"../components/InputField\";\nimport CustomInputField from \"../components/CustomInputField\";\nimport ProfilePhoto from \"../components/ProfilePhoto\";\nimport AuthController from \"../controllers/AuthController\";\nimport \"../css/Profile.css\";\nimport ProfileAPI from \"../apis/profileApi\";\nimport Loading from \"../components/Loading\";\n\n/**\n * Profile Page\n * - Shows user their account information\n * - Allows user to modify their account information\n * - Allows user to add custom input fields in the form [{label: \"Label 1\", value: \"Value 1\"}, {label: \"Label 2\", value: \"Value 2\"}]\n */\nclass Profile extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n            buttonDisabled: true,\n            photoURL: \"\",\n            firstName: \"\",\n            lastName: \"\",\n            email: \"\",\n            organisation: \"\",\n            role: \"\",\n            phone: \"\",\n            link: \"\",\n            emailError: \"\",\n            emailValid: true,\n            customInput: [],\n            defaultPhotoURL:\n                \"https://techcommunity.microsoft.com/t5/image/serverpage/image-id/217078i525F6A9EF292601F/image-size/large?v=v2&px=999\",\n            image: null,\n        };\n    }\n\n    // request user profile data\n    async componentDidMount() {\n        const data = await ProfileAPI.getUserProfile();\n        const customFields = await ProfileAPI.getCustomFields();\n        this.setState({\n            photoURL:\n                data.image === null ? this.state.defaultPhotoURL : data.image,\n            firstName: data.first_name,\n            lastName: data.last_name,\n            email: data.email,\n            organisation: data.organisation,\n            role: data.role,\n            phone: data.phone,\n            customInput: customFields,\n            loading: false,\n        });\n    }\n\n    changeHandler = async (event) => {\n        this.setState({\n            [event.target.name]: event.target.value,\n            buttonDisabled: false,\n        });\n        this.preventBlankLabel();\n    };\n\n    customChangeHandler = async (event) => {\n        const newCustomInput = this.state.customInput;\n        const id = parseInt(event.target.name);\n        newCustomInput[id] = {\n            label: this.state.customInput[id].label,\n            value: event.target.value,\n        };\n        this.setState({\n            customInput: newCustomInput,\n            buttonDisabled: false,\n        });\n        this.preventBlankLabel();\n    };\n\n    customLabelChangeHandler = async (event) => {\n        const newCustomInput = this.state.customInput;\n        const id = parseInt(event.target.name);\n        newCustomInput[id] = {\n            label: event.target.value,\n            value: this.state.customInput[id].value,\n        };\n        // labels must not be blank\n        this.setState({\n            customInput: newCustomInput,\n            buttonDisabled: false,\n        });\n        this.preventBlankLabel();\n    };\n\n    preventBlankLabel = () => {\n        for (const field of this.state.customInput) {\n            if (field.label.trim() === \"\") {\n                this.setState({\n                    buttonDisabled: true,\n                });\n            }\n        }\n    };\n\n    emailChangeHandler = async (event) => {\n        await this.setState({\n            [event.target.name]: event.target.value,\n        });\n        let result = await AuthController.emailChangeHandler(this.state.email);\n        this.setState({\n            emailError: result.error,\n            emailValid: result.valid,\n            buttonDisabled: false,\n        });\n        this.preventBlankLabel();\n    };\n\n    photoChangeHandler = async (event) => {\n        // creates temporary URL for selected photo file object\n        const selected = URL.createObjectURL(event.target.files[0]);\n        this.setState({\n            photoURL: selected,\n            buttonDisabled: false,\n            image: event.target.files[0],\n        });\n        this.preventBlankLabel();\n    };\n\n    getFields = () => {\n        return [\n            <InputField\n                type=\"text\"\n                name=\"firstName\"\n                label=\"First Name\"\n                placeholder=\"e.g. Jane\"\n                onChange={this.changeHandler}\n                value={this.state.firstName}\n            />,\n            <InputField\n                type=\"text\"\n                name=\"lastName\"\n                label=\"Last Name\"\n                placeholder=\"e.g. Doe\"\n                onChange={this.changeHandler}\n                value={this.state.lastName}\n            />,\n            <InputField\n                type=\"email\"\n                name=\"email\"\n                label=\"Email Address\"\n                placeholder=\"e.g. jane.doe@email.com\"\n                onChange={this.emailChangeHandler}\n                value={this.state.email}\n            />,\n            <InputField\n                type=\"text\"\n                name=\"organisation\"\n                label=\"Organisation\"\n                placeholder=\"e.g. Hogwarts\"\n                onChange={this.changeHandler}\n                value={this.state.organisation}\n            />,\n            <InputField\n                type=\"text\"\n                name=\"role\"\n                label=\"Role\"\n                placeholder=\"e.g. Wizard\"\n                onChange={this.changeHandler}\n                value={this.state.role}\n            />,\n            <InputField\n                type=\"text\"\n                name=\"phone\"\n                label=\"Phone Number\"\n                placeholder=\"e.g. +61 302 203 392\"\n                onChange={this.changeHandler}\n                value={this.state.phone}\n            />,\n            // <InputField\n            //     type=\"url\"\n            //     name=\"link\"\n            //     label=\"LinkedIn URL\"\n            //     placeholder=\"e.g. linkedin.com/in/jane-doe\"\n            //     onChange={this.changeHandler}\n            //     value={this.state.link}\n            // />,\n        ];\n    };\n\n    getLeftCol = () => {\n        const fields = this.getFields().concat(this.getCustomFields());\n        const colLen = Math.floor((fields.length + 1) / 2);\n        return fields.slice(0, colLen).map((item) => item);\n    };\n\n    getRightCol = () => {\n        const fields = this.getFields().concat(this.getCustomFields());\n        const colLen = Math.floor((fields.length + 1) / 2);\n        return fields.slice(colLen, fields.length).map((item) => item);\n    };\n\n    getCustomFields = () => {\n        var fields = [];\n        for (const [id, item] of this.state.customInput.entries()) {\n            fields.push(\n                <CustomInputField\n                    key={id}\n                    listId={id}\n                    label={item.label}\n                    type=\"text\"\n                    placeholder=\"Enter field value\"\n                    value={item.value}\n                    name={id}\n                    onChange={this.customChangeHandler}\n                    onLabelChange={this.customLabelChangeHandler}\n                    onDeleteChange={this.deleteCustomField}\n                />\n            );\n        }\n        return fields;\n    };\n\n    addCustomField = () => {\n        var newCustomInputs = this.state.customInput;\n        newCustomInputs.push({\n            label: \"Label\",\n            value: \"\",\n        });\n        this.setState({\n            customInput: newCustomInputs,\n            buttonDisabled: false,\n        });\n        this.preventBlankLabel();\n    };\n\n    deleteCustomField = (id) => {\n        var newCustomInputs = this.state.customInput;\n        newCustomInputs.splice(id, 1);\n        this.setState({\n            customInput: newCustomInputs,\n            buttonDisabled: false,\n        });\n        this.preventBlankLabel();\n    };\n\n    saveHandler = async (event) => {\n        await ProfileAPI.updateProfile({\n            firstName: this.state.firstName,\n            lastName: this.state.lastName,\n            email: this.state.email,\n            organisation: this.state.organisation,\n            role: this.state.role,\n            phone: this.state.phone,\n            image: this.state.image,\n        });\n        await ProfileAPI.updateCustomFields(this.state.customInput);\n        this.setState({\n            buttonDisabled: true,\n        });\n    };\n\n    render() {\n        if (this.state.loading) return <Loading />;\n        return (\n            <div className=\"profile-content\">\n                <div className=\"title-row\">\n                    <div className=\"title\">Public Information</div>\n                    <div className=\"info-dropdown\">\n                        <div className=\"info\">What's this?</div>\n                        <div className=\"tool-tip\">\n                            Your public information may be downloaded by other\n                            users of this application.\n                        </div>\n                    </div>\n                </div>\n                <ProfilePhoto\n                    src={this.state.photoURL}\n                    alt=\"User Profile Photo\"\n                    firstName={this.state.firstName}\n                    lastname={this.state.lastName}\n                    onChange={this.photoChangeHandler}\n                />\n                <div className=\"form\">\n                    <div className=\"col left-col\">{this.getLeftCol()}</div>\n                    <div className=\"col right-col\">\n                        {this.getRightCol()}\n                        <div\n                            className=\"new-field-button\"\n                            onClick={this.addCustomField}\n                        >\n                            + New Field\n                        </div>\n                    </div>\n                </div>\n                <div className=\"button-row\">\n                    <button className=\"invisible-button\" />\n                    <button\n                        className=\"primary-button\"\n                        disabled={this.state.buttonDisabled}\n                        onClick={this.saveHandler}\n                    >\n                        SAVE\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Profile;\n","import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\nimport \"../css/TwoSelectButton.css\";\nimport { FaTable, FaAddressBook } from \"react-icons/fa\";\n\n/*\n    Contacts View Button\n    refers to the toggle button that allows users to select \n    Group View or Contacts View \n    |  Group  | Contacts |\n */\n\nclass ContactsViewButton extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            leftButtonState: \"\",\n            rightButtonState: \"\",\n            leftLink: \"/groups\",\n            rightLink: \"/contacts\",\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.history.location.pathname === this.state.rightLink) {\n            this.setState({\n                leftButtonState: \"deselected\",\n                rightButtonState: \"selected\",\n            });\n        } else {\n            this.setState({\n                leftButtonState: \"selected\",\n                rightButtonState: \"deselected\",\n            });\n        }\n    }\n\n    leftOnClick = async () => {\n        if (this.props.history.location.pathname !== this.state.leftLink) {\n            this.props.history.push(this.state.leftLink);\n            this.setState({\n                leftButtonState: \"selected\",\n                rightButtonState: \"deselected\",\n            });\n        }\n    };\n\n    rightOnClick = async () => {\n        if (this.props.history.location.pathname !== this.state.rightLink) {\n            this.props.history.push(this.state.rightLink);\n            this.setState({\n                leftButtonState: \"deselected\",\n                rightButtonState: \"selected\",\n            });\n        }\n    };\n\n    render() {\n        return (\n            <div className=\"two-select-button\">\n                <div\n                    className={\"left \" + this.state.leftButtonState}\n                    onClick={this.leftOnClick}\n                >\n                    <FaAddressBook /> <span className=\"text-color\">Groups</span>\n                </div>\n                <div\n                    className={\"right \" + this.state.rightButtonState}\n                    onClick={this.rightOnClick}\n                >\n                    <FaTable /> <span className=\"text-color\">Contacts</span>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(ContactsViewButton);\n","import \"../css/EditContact.css\";\nimport ContactsAPI from \"../apis/contactsApi\";\nimport { GroupsAPI } from \"../apis/groupsApi\";\nimport ContactOverlay from \"./ContactOverlay\";\n\nexport default class AddContact extends ContactOverlay {\n    componentDidMount = async () => {\n        await super.componentDidMount();\n        const group = this.props.location.group ? this.props.location.group : null;\n        this.setState({\n            loading: false,\n            group: group,\n        });\n    };\n\n    save = async () => {\n        await super.save();\n        // create new contact\n        const contact = await ContactsAPI.createContact({\n            firstName: this.state.firstName,\n            lastName: this.state.lastName,\n            email: this.state.email,\n            organisation: this.state.organisation,\n            role: this.state.role,\n            phone: this.state.phone,\n        });\n\n        this.setState({\n            url: contact.url\n        })\n\n        // create new contact group\n        await GroupsAPI.updateContactGroup(\n            this.state.url,\n            this.state.originalGroup && this.state.originalGroup.url,\n            this.state.group && this.state.group.url,\n            this.state.group && this.state.group.label\n        );\n\n        // save contact photo\n        await ContactsAPI.saveContactPhoto(this.state.url, this.state.image);\n\n        // save contact custom answers and questions\n        const customInput = await ContactsAPI.saveCustomQuestions(\n            this.state.customInput\n        );\n        this.setState({\n            customInput: customInput,\n        });\n        await ContactsAPI.saveCustomAnswers(\n            this.state.url,\n            this.state.customInput\n        );\n        await ContactsAPI.deleteCustomQuestions(this.state.deletedInput);\n\n        this.goBackAndReload();\n    };\n\n    deleteContact = () => {\n        this.props.history.goBack();\n    };\n}\n","import React from \"react\";\nimport \"../css/ContactsOptionsBar.css\";\nimport ContactsViewButton from \"./ContactsViewButton\";\nimport { FaPlus } from \"react-icons/fa\";\nimport { Route } from \"react-router\";\nimport { withRouter } from \"react-router-dom\";\nimport AddContact from \"./AddContact\";\n\n/*\n    Contacts Options Bar \n    refers to the bar on top of the contacts views below the Nav bar\n    - Allows users to switch between Group view and Contacts view\n    - Allows users to sort and filter\n    - Allows users to search\n    - Allows users to Add new contact by clicking on the button\n */\n\nclass ContactsOptionsBar extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            info: \"\",\n        };\n    }\n\n    nextPath(item) {\n        this.props.history.push(\"/contacts/add\");\n    }\n\n    newContactOnclick = () => {\n        this.props.history.push(\n            `${this.props.match.url.replace(/\\/$/g, \"\")}/add/`\n        );\n    };\n\n    render() {\n        return (\n            <div>\n                <Route\n                    exact\n                    path={`${this.props.match.url.replace(/\\/$/g, \"\")}/add/`}\n                    component={AddContact}\n                ></Route>\n                <div className=\"options-bar\">\n                    <div className=\"left-items\">\n                        <ContactsViewButton />\n                    </div>\n                    <div className=\"right-items\">\n                        {/* <SearchBar /> */}\n                        <button\n                            className=\"button primary-button\"\n                            id=\"add-contact-button\"\n                            onClick={this.newContactOnclick}\n                        >\n                            NEW CONTACT\n                        </button>\n                        <button\n                            className=\"button primary-button\"\n                            id=\"add-contact-button-small\"\n                            onClick={this.newContactOnclick}\n                        >\n                            <FaPlus />\n                        </button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(ContactsOptionsBar);\n","import React from \"react\";\nimport AuthAPI from \"../apis/authApi\";\nimport InputField from \"../components/InputField\";\nimport AuthController from \"../controllers/AuthController\";\nimport \"../css/Settings.css\";\n\nclass Settings extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            oldPassword: \"\",\n            newPassword: \"\",\n            confirmNewPassword: \"\",\n            passwordError: \"\",\n            passwordValid: false,\n            confirmPasswordError: \"\",\n            confirmPasswordValid: false,\n            message: \"\",\n        };\n    }\n\n    onChange = (event) => {\n        this.setState({\n            [event.target.name]: event.target.value,\n        });\n    };\n\n    passwordChangeHandler = async (event) => {\n        await this.setState({ [event.target.name]: event.target.value });\n        let result = AuthController.passwordChangeHandler(event.target.value);\n        this.setState({\n            passwordError: result.error,\n            passwordValid: result.valid,\n        });\n        let confirmPasswordResult =\n            await AuthController.confirmPasswordChangeHandler(\n                this.state.password,\n                this.state.confirmPassword\n            );\n        this.setState({\n            confirmPasswordError: confirmPasswordResult.error,\n            confirmPasswordValid: confirmPasswordResult.valid,\n        });\n    };\n\n    confirmPasswordChangeHandler = async (event) => {\n        await this.setState({ [event.target.name]: event.target.value });\n        let result = await AuthController.confirmPasswordChangeHandler(\n            this.state.newPassword,\n            this.state.confirmNewPassword\n        );\n        this.setState({\n            confirmPasswordError: result.error,\n            confirmPasswordValid: result.valid,\n        });\n    };\n\n    resetPassword = async () => {\n        const response = await AuthAPI.resetPassword({\n            username: sessionStorage.getItem(\"username\"),\n            oldPassword: this.state.oldPassword,\n            newPassword: this.state.newPassword,\n        });\n        var message = \"\";\n        if (response.success === true) {\n            message = \"Password saved successfully.\";\n        } else {\n            message =\n                \"Reset password could not be completed at this time. Please try again later.\";\n        }\n        this.setState({\n            message: message,\n            oldPassword: \"\",\n            newPassword: \"\",\n            confirmNewPassword: \"\",\n            passwordError: \"\",\n            passwordValid: false,\n            confirmPasswordError: \"\",\n            confirmPasswordValid: false,\n        });\n    };\n\n    render() {\n        return (\n            <div className=\"settings-page\">\n                <div className=\"col left-col\">\n                    <InputField\n                        type=\"password\"\n                        name=\"oldPassword\"\n                        label=\"Old Password\"\n                        placeholder=\"*********\"\n                        onChange={this.onChange}\n                        value={this.state.oldPassword}\n                    ></InputField>\n                    <InputField\n                        type=\"password\"\n                        name=\"newPassword\"\n                        label=\"New Password\"\n                        placeholder=\"*********\"\n                        onChange={this.passwordChangeHandler}\n                        value={this.state.newPassword}\n                        error={this.state.passwordError}\n                    ></InputField>\n                    <InputField\n                        type=\"password\"\n                        name=\"confirmNewPassword\"\n                        label=\"Confirm New Password\"\n                        placeholder=\"*********\"\n                        onChange={this.confirmPasswordChangeHandler}\n                        value={this.state.confirmNewPassword}\n                        error={this.state.confirmPasswordError}\n                    ></InputField>\n                    <div className=\"message\">{this.state.message}</div>\n                    <div className=\"button-row\">\n                        <button\n                            className=\"button invisible-button\"\n                            type=\"button\"\n                            name=\"next\"\n                            onClick={this.backHandler}\n                        >\n                            BACK\n                        </button>\n                        <button\n                            className=\"button primary-button\"\n                            type=\"button\"\n                            name=\"next\"\n                            onClick={this.resetPassword}\n                            disabled={\n                                !(\n                                    this.state.passwordValid &&\n                                    this.state.confirmPasswordValid\n                                )\n                            }\n                        >\n                            Reset Password\n                        </button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Settings;\n","import React from \"react\";\nimport '../../css/Landing.css';\n\nclass Landing extends React.Component {\n    render() {\n        return (\n            <div className=\"landing-page\" data-testid=\"landing-page\">\n                <div className=\"landing-top-region\">\n                    <div className=\"left-item\"></div>\n                    <img\n                        className=\"landing-logo middle-item\"\n                        src=\"knotwork-02.png\"\n                        alt=\"Knotwork logo\"\n                    ></img>\n                    <div\n                        className=\"login-button right-item\"\n                        onClick={() => this.props.history.push(\"/auth/login\")}\n                    >\n                        LOG IN\n                    </div>\n                </div>\n\n                <div className=\"rectangle\">\n                    <div className=\"slogan\">\n                        An organised and structured way to keep in touch.\n                    </div>\n                    <div className=\"icons-content\">\n                        <div className=\"group-pic\">\n                            <img\n                                className=\"pic\"\n                                src=\"groups.png\"\n                                alt=\"Knotwork logo\"\n                            ></img>\n                            <div class=\"text\">Group View</div>\n                            <div class=\"sub\">\n                                View contacts in the same group.\n                            </div>\n                        </div>\n                        <div className=\"group-pic\">\n                            <img\n                                className=\"pic\"\n                                src=\"favourites.png\"\n                                alt=\"Knotwork logo\"\n                            ></img>\n                            <div className=\"text\">Favourites</div>\n                            <div className=\"sub\">\n                                Users can favourite contacts.\n                            </div>\n                        </div>\n                        <div className=\"group-pic\">\n                            <img\n                                className=\"pic\"\n                                src=\"table.png\"\n                                alt=\"Knotwork logo\"\n                            ></img>\n\n                            <div class=\"text\">Table View</div>\n                            <div class=\"sub\">\n                                View contacts in a table format.\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <div class=\"register\">\n                    Register today to strengthen your relationships\n                </div>\n                <div class=\"action-buttons button-row\">\n                    <button\n                        className=\"button primary-button\"\n                        type=\"button\"\n                        name=\"next\"\n                        onClick={() => this.props.history.push(\"/auth/signup\")}\n                    >\n                        REGISTER\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Landing;\n","import React from \"react\";\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Redirect,\n} from \"react-router-dom\";\nimport Groups from \"../pages/Groups\";\nimport Header from \"./header/Header\";\nimport Contacts from \"../pages/Contacts\";\nimport EnterEmail from \"../pages/auth/EnterEmail\";\nimport SignUp from \"../pages/auth/SignUp\";\nimport Login from \"../pages/auth/Login\";\nimport Profile from \"../pages/Profile\";\nimport ContactsOptionsBar from \"./ContactsOptionsBar\";\nimport Settings from \"../pages/Settings\";\nimport Landing from \"../pages/auth/Landing\";\n\n/**\n * App Router\n * @returns Router object with defined app routes\n */\n\nclass AppRouter extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            contactsOptionsBar: <ContactsOptionsBar />,\n        };\n    }\n\n    isLoggedIn = () => {\n        const id = sessionStorage.getItem(\"userId\");\n        return id !== null;\n    };\n\n    contactsPage = () => {\n        return (\n            <div>\n                {this.state.contactsOptionsBar}\n                <Contacts />\n            </div>\n        );\n    };\n\n    groupsPage = () => {\n        return (\n            <div>\n                {this.state.contactsOptionsBar}\n                <Groups />\n            </div>\n        );\n    };\n\n    render() {\n        return (\n            <Router>\n                <Switch>\n                    {this.isLoggedIn() ? (\n                        <Route exact path=\"/\">\n                            <Redirect to=\"/groups\" />\n                        </Route>\n                    ) : (\n                        <Route exact path=\"/\" component={Landing} />\n                    )}\n                    <Route exact path=\"/auth/email\" component={EnterEmail} />\n                    <Route exact path=\"/auth/signup\" component={SignUp} />\n                    <Route exact path=\"/auth/login\" component={Login} />\n                    <Route exact path=\"/auth/logout\">\n                        <Redirect to=\"/\" />\n                    </Route>\n                    <React.Fragment>\n                        <div>\n                            <Header />\n                            <Route\n                                exact\n                                path=\"/profile\"\n                                component={Profile}\n                            ></Route>\n                            <Route\n                                exact\n                                path=\"/settings\"\n                                component={Settings}\n                            ></Route>\n                            <Route\n                                path=\"/groups\"\n                                component={this.groupsPage}\n                            ></Route>\n                            <Route\n                                path=\"/contacts\"\n                                component={this.contactsPage}\n                            ></Route>\n                        </div>\n                    </React.Fragment>\n                </Switch>\n            </Router>\n        );\n    }\n}\n\nexport default AppRouter;\n","import React from \"react\";\nimport \"./css/App.css\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport AppRouter from \"./components/Routes\";\n\n/*\nTo run the app on your local browser - from your terminal run:\n1. npm install \n2. npm run start\n*/\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        if (sessionStorage.getItem(\"theme\") === null) {\n            sessionStorage.setItem(\"theme\", \"light\");\n        }\n    }\n\n    render() {\n        return (\n            <section className=\"body\">\n                <div>\n                    <AppRouter />\n                </div>\n            </section>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}